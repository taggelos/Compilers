//
// Generated by JTB 1.3.2 DIT@UoA patched
//
import syntaxtree.*;
import java.util.*;
import java.util.Vector;
import visitor.GJDepthFirst;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;
import java.util.regex.Matcher;

public class SpigletVisitor extends  GJDepthFirst<String,String> {
	int instruction_counter;
	Vector<String> instruction_list;
	Vector<String>  var_list;
	Vector<String>  next_list;
	Vector<String>  varMove_list;
	Vector<String>  constMove_list;
	Vector<String>  varUse_list;
	Vector<String>  varDef_list;
	HashMap<String,Integer>	methodArgs;
	HashMap<String,Integer>	labelMap;
	HashMap<String,String>	nextMap;
	Vector<String> jump_list;


  public SpigletVisitor(){
  	instruction_counter = 1;
  	instruction_list = new Vector<String>();
  	var_list = new Vector<String>();
  	next_list = new Vector<String>();
  	varMove_list = new Vector<String>();
  	constMove_list = new Vector<String>();
  	varUse_list = new Vector<String>();
  	varDef_list = new Vector<String>();
  	methodArgs = new HashMap<String,Integer>();
  	labelMap = new HashMap<String,Integer>();
  	nextMap = new HashMap<String,String>();
  	jump_list = new Vector<String>();
  }


   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public String visit(NodeList n, String argu) throws Exception {
      if (n.size() == 1)
         return n.elementAt(0).accept(this,argu);
      String _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

      public String visit(NodeListOptional n, String argu) throws Exception {
      if ( n.present() ) {
         if (n.size() == 1)
            return n.elementAt(0).accept(this,argu);
         String _ret = "";
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            _ret +=( e.nextElement().accept(this,argu) + "\n");
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public String visit(NodeOptional n, String argu) throws Exception {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   } 

  
	public String visit(NodeSequence n, String argu) throws Exception {
		if (n.size() == 1)
			return n.elementAt(0).toString();
		String _ret = "";
		int _count=0;
		for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
			String part =  e.nextElement().accept(this,argu);
			if(part != null)
				if(e.hasMoreElements())
					_ret += part +" " ;
				else
					_ret += part;
			_count++;
		}
		Pattern labelPattern = Pattern.compile("L[0-9]*.*");
		Matcher labelMatch = labelPattern.matcher(_ret);
		if( labelMatch.matches() ){
			String[] parts = _ret.split(" ");
			String label = parts[0];
			labelMap.put(label,instruction_counter);
		}
		addInstruction(_ret,argu);
		return _ret;
	}

   public String visit(NodeToken n, String argu) throws Exception { return null; }

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public String visit(Goal n, String argu) throws Exception {
		String _ret=null;
		n.f1.accept(this, "MAIN");
		removeLastNext();

		n.f3.accept(this, argu);
		completeNexts();
		return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public String visit(StmtList n, String argu) throws Exception {
      	if(n.f0.present()){
      		String _ret = n.f0.accept(this, argu);
      		// System.out.println(_ret);
      		//Collect all statements
      		String[] stmts = _ret.split("\n");
      		for(int i=0; i< stmts.length; i++){
      			//Split them and add them as istructions.
      			// instructionNumber.put(stmts[i],instruction_counter++);
      			// addInstruction(stmts[i],argu);
      		}
	      	return _ret;
      	}
      	return "";
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public String visit(Procedure n, String argu) throws Exception {
		String _ret=null;
		instruction_counter = 1;
		String name = n.f0.accept(this,argu);
		n.f1.accept(this, name);
		int args = Integer.parseInt(n.f2.accept(this, name));
		methodArgs.put(name,args);
		n.f3.accept(this, name);
		n.f4.accept(this, name);
		removeLastNext();
		return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public String visit(Stmt n, String argu) throws Exception {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "NOOP"
    */
   public String visit(NoOpStmt n, String argu) throws Exception {
      String _ret = n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public String visit(ErrorStmt n, String argu) throws Exception {
		return n.f0.toString();
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public String visit(CJumpStmt n, String argu) throws Exception {
	   	String condition = n.f1.accept(this,argu);
	   	String label = n.f2.accept(this,argu);
		String _ret = n.f0.toString() + " " + condition + " " + label;
		addVarUse(condition, argu);
		String key = argu+" "+instruction_counter;
		nextMap.put(key,label);
		return _ret; 
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public String visit(JumpStmt n, String argu) throws Exception {
		String label = n.f1.accept(this,argu);
		String _ret = n.f0.toString() + " " + label;
		String key = argu+" "+instruction_counter;
		nextMap.put(key,label);
		jump_list.add(key);
		return _ret; 
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public String visit(HStoreStmt n, String argu) throws Exception {
   		String leftHS = n.f1.accept(this,argu);
   		String rightHS = n.f3.accept(this,argu);
		String _ret = n.f0.toString() + " " + leftHS + " " + n.f2.accept(this,argu) + " " + rightHS;
		addVarUse(leftHS,argu);
		addVarUse(rightHS,argu);
		return _ret; 
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public String visit(HLoadStmt n, String argu) throws Exception {
		String leftHS = n.f1.accept(this,argu);
   		String rightHS = n.f2.accept(this,argu);
		String _ret = n.f0.toString() + " " + leftHS + " " + rightHS + " " + n.f3.accept(this,argu);
		addVarDef(leftHS,argu);
		addVarUse(rightHS,argu);
		return _ret; 
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public String visit(MoveStmt n, String argu) throws Exception {
		Pattern tempPattern = Pattern.compile("TEMP [0-9]*.*");
		Pattern intPattern = Pattern.compile("[0-9]*");
		String exp = n.f2.accept(this,argu);
		String temp = n.f1.accept(this,argu);
		String _ret = n.f0.toString() + " " + temp + " " +exp;
    addVarDef(temp,argu);
		Matcher tempMatch = tempPattern.matcher(exp);
		Matcher intMatch = intPattern.matcher(exp);
		if( tempMatch.matches() ){
			addVarMove(temp,exp,argu);
      addVarUse(exp,argu);
		} else if( intMatch.matches() ){
			addConstMove(temp,exp,argu);
		}
		return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public String visit(PrintStmt n, String argu) throws Exception {
		String simpleExp = n.f1.accept(this,argu);
    String _ret = n.f0.toString() + " " + simpleExp;
    Pattern tempPattern = Pattern.compile("TEMP [0-9]*");
    Matcher tempMatch = tempPattern.matcher(simpleExp);
    if( tempMatch.matches() ){
      addVarUse(simpleExp,argu);
    }
		return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public String visit(Exp n, String argu) throws Exception {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
	public String visit(StmtExp n, String argu) throws Exception {
		String _ret = null;
    String stmtlist = n.f1.accept(this,argu);
		String simpleExp = n.f3.accept(this,argu);
		String returnExp =n.f2.toString()+ " "+ simpleExp;
    Pattern tempPattern = Pattern.compile("TEMP [0-9]*");
    Matcher tempMatch = tempPattern.matcher(simpleExp);
    if( tempMatch.matches() ){
      addVarUse(simpleExp,argu);
    }
		addInstruction(returnExp,argu);
		return _ret;
	}

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
	public String visit(Call n, String argu) throws Exception {
		String simpleExp = n.f1.accept(this,argu);
		String _ret = n.f0.toString() + " " + simpleExp + " ( ";
		Pattern tempPattern = Pattern.compile("TEMP [0-9]*");
		Matcher tempMatch = tempPattern.matcher(simpleExp);
		if( tempMatch.matches() ){
		  addVarUse(simpleExp,argu);
		}
		if(n.f3.present()){
			for(int i=0; i< n.f3.size(); i++){
				String temp = n.f3.nodes.elementAt(i).accept(this,argu);
				_ret += temp + " ";
				addVarUse(temp,argu);
			}
		}
		_ret += " )";
		return _ret;
	}

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public String visit(HAllocate n, String argu) throws Exception {
      String _ret = n.f0.toString() + " " + n.f1.accept(this, argu);
      // instructionNumber.put(_ret,instruction_counter++);
      return _ret;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public String visit(BinOp n, String argu) throws Exception {
      String temp =  n.f1.accept(this, argu);
      String simpleExp =  n.f2.accept(this, argu);
      String _ret = n.f0.accept(this, argu) + " " + temp + " " + simpleExp;
      addVarUse(temp,argu);
      Pattern tempPattern = Pattern.compile("TEMP [0-9]*");
      Matcher tempMatch = tempPattern.matcher(simpleExp);
      if( tempMatch.matches() ){
        addVarUse(simpleExp,argu);
      }
      return _ret;
   }

   /**
    * f0 -> "LT"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    */
   public String visit(Operator n, String argu) throws Exception {
      return n.f0.choice.toString();
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public String visit(SimpleExp n, String argu) throws Exception {
      return n.f0.accept(this, argu);
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
	public String visit(Temp n, String argu) throws Exception {
		int tempNo = Integer.parseInt(n.f1.accept(this,argu));
		String _ret = "TEMP "+tempNo;
		addVar(_ret,tempNo,argu);
		return _ret;
	}

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public String visit(IntegerLiteral n, String argu) throws Exception {
      return n.f0.toString();
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public String visit(Label n, String argu) throws Exception {
      return n.f0.toString();
   }


   public void addInstruction(String instr, String method){
   		addNext(instruction_counter, instruction_counter+1, method);
   		String instruction = "instruction(\""+method+"\", "+(instruction_counter++)+", \""+instr+"\").";
		instruction_list.add(instruction);
   }

   public void addNext(int i1, int i2, String method){
		String next = "next(\""+method+"\", "+i1+", "+i2+").";
		next_list.add(next);
   }

	public void completeNexts(){

		removeJumps();

 		Iterator it = nextMap.entrySet().iterator();
    while (it.hasNext()) {
        Map.Entry pair = (Map.Entry)it.next();
        String key = pair.getKey().toString();
        String[] parts = key.split(" ");
		String method = parts[0];
		int intructionNo = Integer.parseInt(parts[1]);
        String label = pair.getValue().toString();
        int labelInstruction = labelMap.get(label);
        addNext(intructionNo, labelInstruction, method);
        it.remove(); // avoids a ConcurrentModificationException
    }
	}

	public void removeJumps(){
		for(int i=0; i< jump_list.size(); i++){
			String key = jump_list.get(i);
			String[] parts = key.split(" ");
			String method = parts[0];
			int intructionNo = Integer.parseInt(parts[1]);
			String regex = "next(\""+method+"\", "+intructionNo+", ";
			for(int j=0; j<next_list.size(); j++){
				String next = next_list.get(j);
				if( next.startsWith(regex) ){
					next_list.remove(next);
				}
			}
		}
	}

   public void addVar(String varName, int tempNo, String method){
   		if( method.equals("MAIN") || (!method.equals("MAIN") && tempNo > methodArgs.get(method))){
			String var = "var(\""+method+"\", \""+varName+"\").";
			if(!var_list.contains(var)){
				var_list.add(var);
			}
		} 
   }

   public void addVarMove(String temp1, String temp2, String method){
		String varMove = "varMove(\""+method+"\", "+instruction_counter+", \""+temp1+"\", \""+temp2+"\").";
		varMove_list.add(varMove);
   }

   public void addConstMove(String temp1, String constant, String method){
		String constMove = "constMove(\""+method+"\", "+instruction_counter+", \""+temp1+"\", "+constant+").";
		constMove_list.add(constMove);
   }

   public void addVarUse(String varName, String method){
   		String varUse = "varUse(\""+method+"\", "+instruction_counter+", \""+varName+"\").";
   		varUse_list.add(varUse);
   }
   public void addVarDef(String varName, String method){
   		String varDef = "varDef(\""+method+"\", "+instruction_counter+", \""+varName+"\").";
   		varDef_list.add(varDef);
   }

   public void printInstructions(){
   		for(int i=0; i<instruction_list.size(); i++){
   			System.out.println(instruction_list.get(i));
   		}
   }
   public void printVars(){
   		for(int i=0; i<var_list.size(); i++){
   			System.out.println(var_list.get(i));
   		}
   }

   public void printVarMoves(){
   		for(int i=0; i<varMove_list.size(); i++){
   			System.out.println(varMove_list.get(i));
   		}
   }

	public void printVarUses(){
   		for(int i=0; i<varUse_list.size(); i++){
   			System.out.println(varUse_list.get(i));
   		}
   }

   public void printVarDefs(){
   		for(int i=0; i<varDef_list.size(); i++){
   			System.out.println(varDef_list.get(i));
   		}
   }   

   public void printConstMoves(){
   		for(int i=0; i<constMove_list.size(); i++){
   			System.out.println(constMove_list.get(i));
   		}
   }

   public void printNexts(){
   		for(int i=0; i<next_list.size(); i++){
   			System.out.println(next_list.get(i));
   		}
   }

	public void removeLastNext(){
		String last = next_list.lastElement();
		next_list.remove(last);
	}

   public static void printMap(Map mp) {
	    Iterator it = mp.entrySet().iterator();
	    while (it.hasNext()) {
	        Map.Entry pair = (Map.Entry)it.next();
	        System.out.println(pair.getKey() + " = " + pair.getValue());
	        it.remove(); 
	    }
	}


	public String getInstructions(){
			String _ret = ""; 
   		for(int i=0; i<instruction_list.size(); i++){
   			_ret+=(instruction_list.get(i))+"\n";
   		}
   		return _ret;
   }
   public String getVars(){
   		String _ret = ""; 
   		for(int i=0; i<var_list.size(); i++){
   			_ret+=(var_list.get(i))+"\n";
   		}
   		return _ret;
   }

   public String getVarMoves(){
   		String _ret = ""; 
   		for(int i=0; i<varMove_list.size(); i++){
   			_ret+=(varMove_list.get(i))+"\n";
   		}
   		return _ret;
   }

	public String getVarUses(){
			String _ret = ""; 
   		for(int i=0; i<varUse_list.size(); i++){
   			_ret+=(varUse_list.get(i))+"\n";
   		}
   		return _ret;
   }

   public String getVarDefs(){
   		String _ret = ""; 
   		for(int i=0; i<varDef_list.size(); i++){
   			_ret+=(varDef_list.get(i))+"\n";
   		}
   		return _ret;
   }   

   public String getConstMoves(){
   		String _ret = ""; 
   		for(int i=0; i<constMove_list.size(); i++){
   			_ret+=(constMove_list.get(i))+"\n";
   		}
   		return _ret;
   }

   public String getNexts(){
   		String _ret = ""; 
   		for(int i=0; i<next_list.size(); i++){
   			_ret+=(next_list.get(i))+"\n";
   		}
   		return _ret;
   }

}
