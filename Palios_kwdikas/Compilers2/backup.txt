import syntaxtree.*;
import visitor.GJDepthFirst;
import java.util.*;
import java.io.*;

public class Wtf extends GJDepthFirst<Integer, Integer> {
//class Wtf implements GJVisitor<R,A> {

    Set<String> setint = new HashSet<String>();
    Set<String> setintar = new HashSet<String>();
    Set<String> setbool = new HashSet<String>();

    Map dec = new HashMap(); 
    //dec.put("a", "10");

    public Integer check(String a) {
        System.out.println("Size = " + setint.size());
        if(setint.isEmpty())
            System.out.println("isEmpty");
        if(setint.contains(a))
            System.out.println("Contains "+ a);
        return 1;
    }

    /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
    public Integer visit(Goal n, Integer argu) throws Exception {
        System.out.println("Goal :");
        Integer main = n.f0.accept(this, null);
        Integer typedec = n.f1.accept(this, null);

        //Integer a = check("aaa");
        //setint.add("aaa");
        //a = check("aaa");
        
        return main;
    }

    /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
    public Integer visit(MainClass n, Integer argu) throws Exception {
        System.out.println("MainClass :");
        Integer id1 = n.f1.accept(this, Integer.parseInt("class"));
        //Integer id1 = n.f1.accept(this, null);
        System.out.println("WTF");
        Integer id2 = n.f11.accept(this, null);
        Integer vardec = n.f14.accept(this, null);
        Integer stat = n.f15.accept(this, null);

        //System.out.println("WTF");

        return stat;
    }

    /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
    public Integer visit(TypeDeclaration n, Integer argu) throws Exception {
        System.out.println("TypeDeclaration :");
        return n.f0.accept(this, null);
    }

    /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
    public Integer visit(ClassDeclaration n, Integer argu) throws Exception {
        System.out.println("ClassDeclaration :");
        Integer id = n.f1.accept(this, null);
        Integer vardec = n.f3.accept(this, null);

        return n.f4.accept(this, null);
    }

    /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
    public Integer visit(ClassExtendsDeclaration n, Integer argu) throws Exception {
        System.out.println("ClassExtendsDeclaration :");
        Integer id1 = n.f1.accept(this, null);
        Integer id2 = n.f3.accept(this, null);
        Integer vardec = n.f5.accept(this, null);

        return n.f6.accept(this, null);
    }

    /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
    public Integer visit(VarDeclaration n, Integer argu) throws Exception {
        System.out.println("VarDeclaration :");
        
        //System.out.println("ID = " + id);
        Integer type = n.f0.accept(this, null);
        Integer id = n.f1.accept(this, type);

        System.out.println("id = " + id);
        System.out.println("SETINT = " + setint);

        return null;
    }

    /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
    public Integer visit(MethodDeclaration n, Integer argu) throws Exception {
        System.out.println("MethodDeclaration :");
        Integer type = n.f1.accept(this, null);
        Integer id = n.f2.accept(this, null);
        Integer parlist = n.f4.accept(this, null);
        Integer vardec = n.f7.accept(this, null);
        Integer stat = n.f8.accept(this, null);
        Integer expr = n.f10.accept(this, null);

        return expr;
    }

    /**
    * f0 -> FormalParameter()
    * f1 -> FormalParameterTail()
    */
    public Integer visit(FormalParameterList n, Integer argu) throws Exception {
        System.out.println("FormalParameterList :");
        Integer par = n.f0.accept(this, null);
        Integer partail = n.f1.accept(this, null);

        return par;
    }

    /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
    public Integer visit(FormalParameter n, Integer argu) throws Exception {
        System.out.println("FormalParameter :");
        Integer id = n.f1.accept(this, null);
        //System.out.println("ID = " + id);
        Integer type = n.f0.accept(this, id);

        return id;
    }

    /**
    * f0 -> ( FormalParameterTerm() )*
    */
    public Integer visit(FormalParameterTail n, Integer argu) throws Exception {
        System.out.println("FormalParameterTail :");
        return n.f0.accept(this, null);
    }

    /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
    public Integer visit(FormalParameterTerm n, Integer argu) throws Exception {
        System.out.println("FormalParameterTerm :");
        return n.f1.accept(this, null);
    }

    /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
    public Integer visit(Type n, Integer argu) throws Exception {
        System.out.println("Type :");
        return n.f0.accept(this, null);
    }

    /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
    public Integer visit(ArrayType n, Integer argu) throws Exception {
        System.out.println("ArrayType :");
        //setintar.add(argu);
        return Integer.parseInt("int[]");
        //return null;
    }

    /**
    * f0 -> "boolean"
    */
    public Integer visit(BooleanType n, Integer argu) throws Exception {
        System.out.println("BooleanType :");
        //setbool.add(argu);
        return Integer.parseInt("bollean");
        //return null;
    }

    /**
    * f0 -> "int"
    */
    public Integer visit(IntegerType n, Integer argu) throws Exception {
        System.out.println("IntegerType :");
        //setint.add(argu);
        return Integer.parseInt("int");
        //return null;
    }

    /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
    public Integer visit(Statement n, Integer argu) throws Exception {
        System.out.println("Statement :");
        return n.f0.accept(this, null);
    }

    /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
    public Integer visit(Block n, Integer argu) throws Exception {
        System.out.println("Block :");
        return n.f1.accept(this, null);
    }

    /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
    public Integer visit(AssignmentStatement n, Integer argu) throws Exception {
        System.out.println("AssignmentStatement :");
        Integer id = n.f0.accept(this, null);
        Integer expr = n.f2.accept(this, null);

        return expr; 
    }

    /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
    public Integer visit(ArrayAssignmentStatement n, Integer argu) throws Exception {
        System.out.println("ArrayAssignmentStatement :");
        Integer id = n.f0.accept(this, null);
        Integer expr1 = n.f2.accept(this, null);
        Integer expr2 = n.f5.accept(this, null);

        return expr2;
    }

    /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
    public Integer visit(IfStatement n, Integer argu) throws Exception {
        System.out.println("IfStatement :");
        Integer expr = n.f2.accept(this, null);
        Integer stat1 = n.f4.accept(this, null);
        Integer stat2 = n.f6.accept(this, null);

        return (stat1 = stat2);
    }

    /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
    public Integer visit(WhileStatement n, Integer argu) throws Exception {
        System.out.println("WhileStatement :");
        Integer expr = n.f2.accept(this, null);
        Integer stat = n.f4.accept(this, null);

        return stat;
    }

    /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
    public Integer visit(PrintStatement n, Integer argu) throws Exception {
        System.out.println("PrintStatement :");
        return n.f2.accept(this, null);
    }

    /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | Clause()
    */
    public Integer visit(Expression n, Integer argu) throws Exception {
        System.out.println("Expression :");
        return n.f0.accept(this, null);
    }

    /**
    * f0 -> Clause()
    * f1 -> "&&"
    * f2 -> Clause()
    */
    public Integer visit(AndExpression n, Integer argu) throws Exception {
        System.out.println("AndExpression :");
        Integer clause1 = n.f0.accept(this, null);
        Integer clause2 = n.f2.accept(this, null);

        return (clause1 & clause2);
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
    public Integer visit(CompareExpression n, Integer argu) throws Exception {
        System.out.println("CompareExpression :");
        Integer expr1 = n.f0.accept(this, null);
        Integer expr2 = n.f2.accept(this, null);
        
        return (expr1 << expr2);
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
    public Integer visit(PlusExpression n, Integer lexpr) throws Exception {
        System.out.println("PlusExpression :");
        Integer expr1 = n.f0.accept(this, null);
        Integer expr2 = n.f2.accept(this, null);
        
        return (expr1 + expr2);
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
    public Integer visit(MinusExpression n, Integer argu) throws Exception {
        System.out.println("MinusExpression :");
        Integer expr1 = n.f0.accept(this, null);
        Integer expr2 = n.f2.accept(this, null);
        
        return (expr1 - expr2);
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
    public Integer visit(TimesExpression n, Integer argu) throws Exception {
        System.out.println("TimesExpression :");
        Integer expr1 = n.f0.accept(this, null);
        Integer expr2 = n.f2.accept(this, null);
        
        return (expr1 * expr2);  
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
    public Integer visit(ArrayLookup n, Integer argu) throws Exception {
        System.out.println("ArrayLookup :");
        Integer expr1 = n.f0.accept(this, null);
        Integer expr2 = n.f2.accept(this, null);

        return expr1;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
    public Integer visit(ArrayLength n, Integer argu) throws Exception {
        System.out.println("ArrayLength :");
        Integer expr = n.f0.accept(this, null);

        return expr;
    }

    /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
    public Integer visit(MessageSend n, Integer argu) throws Exception {
        System.out.println("MessageSend :");
        Integer expr = n.f0.accept(this, null);
        Integer id = n.f2.accept(this, null);

        Integer exprlist = null;
        if(n.f4.present())
            exprlist = n.f4.accept(this, null);

        return exprlist;    //??
    }

    /**
    * f0 -> Expression()
    * f1 -> ExpressionTail()
    */
    public Integer visit(ExpressionList n, Integer argu) throws Exception {
        System.out.println("ExpressionList :");
        Integer expr = n.f0.accept(this, null);
        Integer exprtail = n.f1.accept(this, null);

        return expr;
    }

    /**
    * f0 -> ( ExpressionTerm() )*
    */
    public Integer visit(ExpressionTail n, Integer argu) throws Exception {
        System.out.println("ExpressionTail :");
        return n.f0.accept(this, null);
    }

    /**
    * f0 -> ","
    * f1 -> Expression()
    */
    public Integer visit(ExpressionTerm n, Integer argu) throws Exception {
        System.out.println("ExpressionTerm :");
        return n.f1.accept(this, null);
    }

    /**
    * f0 -> NotExpression()
    *       | PrimaryExpression()
    */
    public Integer visit(Clause n, Integer argu) throws Exception {
        System.out.println("Clause :");
        return n.f0.accept(this, null);
    }

    /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | BracketExpression()
    */
    public Integer visit(PrimaryExpression n, Integer argu) throws Exception {
        System.out.println("PrimaryExpression :");
        return n.f0.accept(this, null);
    }

    /**
    * f0 -> <INTEGER_LITERAL>
    */
    public Integer visit(IntegerLiteral n, Integer argu) throws Exception {
        System.out.println("IntegerLiteral :");
        //return Character.getNumericValue(f0);
        return Integer.parseInt(n.f0.toString());
    }

    /**
    * f0 -> "true"
    */
    public Integer visit(TrueLiteral n, Integer argu) throws Exception {
        return null;
    }

    /**
    * f0 -> "false"
    */
    public Integer visit(FalseLiteral n, Integer argu) throws Exception {
        return null;
    }

    /**
    * f0 -> <IDENTIFIER>
    */
    public Integer visit(Identifier n, Integer type) throws Exception {
        System.out.println("Identifier :");
        System.out.println("aaaaaaaa = " + n.f0.toString());

        //return Integer.parseInt(n.f0.toString());
        System.out.println("Type = " + type);

        if(type == Integer.parseInt("int[]")) {
            System.out.println("int[]");
            setintar.add(n.f0.toString());
        }
        else if(type == Integer.parseInt("boolean")) {
            System.out.println("boolean");
            setbool.add(n.f0.toString());
        }
        else if(type == Integer.parseInt("int")) {
            System.out.println("int");
            setint.add(n.f0.toString());
        }
        else if(type == null){
            System.out.println("class");
            return Integer.parseInt("class");
            //System.out.println("Size = " + setint.size());
        }
        else if(type == Integer.parseInt("class")) {
            System.out.println("class");
        }

        System.out.println("aaaaaaaa = " + n.f0.toString());

   
        return null;  //??
    }

    /**
    * f0 -> "this"
    */
    public Integer visit(ThisExpression n, Integer argu) throws Exception {
        return null;
    }

    /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
    public Integer visit(ArrayAllocationExpression n, Integer argu) throws Exception {
        System.out.println("ArrayAllocationExpression :");
        return n.f3.accept(this, null);
    }

    /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
    public Integer visit(AllocationExpression n, Integer argu) throws Exception {
        System.out.println("AllocationExpression :");
        return n.f1.accept(this, null);
    }

    /**
    * f0 -> "!"
    * f1 -> Clause()
    */
    public Integer visit(NotExpression n, Integer argu) throws Exception {
        System.out.println("NotExpression :");
        return n.f1.accept(this, null);
    }

    /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
    public Integer visit(BracketExpression n, Integer argu) throws Exception {
        System.out.println("BracketExpression :");
        return n.f1.accept(this, null);
    }

}
