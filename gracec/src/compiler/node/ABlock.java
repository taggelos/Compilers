/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ABlock extends PBlock
{
    private TLAg _lAg_;
    private final LinkedList<PStmt> _stmt_ = new LinkedList<PStmt>();
    private TRAg _rAg_;

    public ABlock()
    {
        // Constructor
    }

    public ABlock(
        @SuppressWarnings("hiding") TLAg _lAg_,
        @SuppressWarnings("hiding") List<?> _stmt_,
        @SuppressWarnings("hiding") TRAg _rAg_)
    {
        // Constructor
        setLAg(_lAg_);

        setStmt(_stmt_);

        setRAg(_rAg_);

    }

    @Override
    public Object clone()
    {
        return new ABlock(
            cloneNode(this._lAg_),
            cloneList(this._stmt_),
            cloneNode(this._rAg_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABlock(this);
    }

    public TLAg getLAg()
    {
        return this._lAg_;
    }

    public void setLAg(TLAg node)
    {
        if(this._lAg_ != null)
        {
            this._lAg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lAg_ = node;
    }

    public LinkedList<PStmt> getStmt()
    {
        return this._stmt_;
    }

    public void setStmt(List<?> list)
    {
        for(PStmt e : this._stmt_)
        {
            e.parent(null);
        }
        this._stmt_.clear();

        for(Object obj_e : list)
        {
            PStmt e = (PStmt) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._stmt_.add(e);
        }
    }

    public TRAg getRAg()
    {
        return this._rAg_;
    }

    public void setRAg(TRAg node)
    {
        if(this._rAg_ != null)
        {
            this._rAg_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._rAg_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._lAg_)
            + toString(this._stmt_)
            + toString(this._rAg_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._lAg_ == child)
        {
            this._lAg_ = null;
            return;
        }

        if(this._stmt_.remove(child))
        {
            return;
        }

        if(this._rAg_ == child)
        {
            this._rAg_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._lAg_ == oldChild)
        {
            setLAg((TLAg) newChild);
            return;
        }

        for(ListIterator<PStmt> i = this._stmt_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PStmt) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._rAg_ == oldChild)
        {
            setRAg((TRAg) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
