/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class ALValTerm extends PTerm
{
    private PPlusOrMinus _plusOrMinus_;
    private PLVal _lVal_;

    public ALValTerm()
    {
        // Constructor
    }

    public ALValTerm(
        @SuppressWarnings("hiding") PPlusOrMinus _plusOrMinus_,
        @SuppressWarnings("hiding") PLVal _lVal_)
    {
        // Constructor
        setPlusOrMinus(_plusOrMinus_);

        setLVal(_lVal_);

    }

    @Override
    public Object clone()
    {
        return new ALValTerm(
            cloneNode(this._plusOrMinus_),
            cloneNode(this._lVal_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseALValTerm(this);
    }

    public PPlusOrMinus getPlusOrMinus()
    {
        return this._plusOrMinus_;
    }

    public void setPlusOrMinus(PPlusOrMinus node)
    {
        if(this._plusOrMinus_ != null)
        {
            this._plusOrMinus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plusOrMinus_ = node;
    }

    public PLVal getLVal()
    {
        return this._lVal_;
    }

    public void setLVal(PLVal node)
    {
        if(this._lVal_ != null)
        {
            this._lVal_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._lVal_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._plusOrMinus_)
            + toString(this._lVal_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._plusOrMinus_ == child)
        {
            this._plusOrMinus_ = null;
            return;
        }

        if(this._lVal_ == child)
        {
            this._lVal_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._plusOrMinus_ == oldChild)
        {
            setPlusOrMinus((PPlusOrMinus) newChild);
            return;
        }

        if(this._lVal_ == oldChild)
        {
            setLVal((PLVal) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
