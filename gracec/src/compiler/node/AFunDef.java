/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AFunDef extends PFunDef
{
    private PHeader _header_;
    private final LinkedList<PLocalDef> _localDef_ = new LinkedList<PLocalDef>();
    private PBlock _block_;

    public AFunDef()
    {
        // Constructor
    }

    public AFunDef(
        @SuppressWarnings("hiding") PHeader _header_,
        @SuppressWarnings("hiding") List<?> _localDef_,
        @SuppressWarnings("hiding") PBlock _block_)
    {
        // Constructor
        setHeader(_header_);

        setLocalDef(_localDef_);

        setBlock(_block_);

    }

    @Override
    public Object clone()
    {
        return new AFunDef(
            cloneNode(this._header_),
            cloneList(this._localDef_),
            cloneNode(this._block_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFunDef(this);
    }

    public PHeader getHeader()
    {
        return this._header_;
    }

    public void setHeader(PHeader node)
    {
        if(this._header_ != null)
        {
            this._header_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._header_ = node;
    }

    public LinkedList<PLocalDef> getLocalDef()
    {
        return this._localDef_;
    }

    public void setLocalDef(List<?> list)
    {
        for(PLocalDef e : this._localDef_)
        {
            e.parent(null);
        }
        this._localDef_.clear();

        for(Object obj_e : list)
        {
            PLocalDef e = (PLocalDef) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._localDef_.add(e);
        }
    }

    public PBlock getBlock()
    {
        return this._block_;
    }

    public void setBlock(PBlock node)
    {
        if(this._block_ != null)
        {
            this._block_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._block_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._header_)
            + toString(this._localDef_)
            + toString(this._block_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._header_ == child)
        {
            this._header_ = null;
            return;
        }

        if(this._localDef_.remove(child))
        {
            return;
        }

        if(this._block_ == child)
        {
            this._block_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._header_ == oldChild)
        {
            setHeader((PHeader) newChild);
            return;
        }

        for(ListIterator<PLocalDef> i = this._localDef_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PLocalDef) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._block_ == oldChild)
        {
            setBlock((PBlock) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
