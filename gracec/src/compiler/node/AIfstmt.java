/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AIfstmt extends PIfstmt
{
    private PIfHeader _ifHeader_;
    private PIfTrail _ifTrail_;

    public AIfstmt()
    {
        // Constructor
    }

    public AIfstmt(
        @SuppressWarnings("hiding") PIfHeader _ifHeader_,
        @SuppressWarnings("hiding") PIfTrail _ifTrail_)
    {
        // Constructor
        setIfHeader(_ifHeader_);

        setIfTrail(_ifTrail_);

    }

    @Override
    public Object clone()
    {
        return new AIfstmt(
            cloneNode(this._ifHeader_),
            cloneNode(this._ifTrail_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfstmt(this);
    }

    public PIfHeader getIfHeader()
    {
        return this._ifHeader_;
    }

    public void setIfHeader(PIfHeader node)
    {
        if(this._ifHeader_ != null)
        {
            this._ifHeader_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifHeader_ = node;
    }

    public PIfTrail getIfTrail()
    {
        return this._ifTrail_;
    }

    public void setIfTrail(PIfTrail node)
    {
        if(this._ifTrail_ != null)
        {
            this._ifTrail_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifTrail_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ifHeader_)
            + toString(this._ifTrail_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ifHeader_ == child)
        {
            this._ifHeader_ = null;
            return;
        }

        if(this._ifTrail_ == child)
        {
            this._ifTrail_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ifHeader_ == oldChild)
        {
            setIfHeader((PIfHeader) newChild);
            return;
        }

        if(this._ifTrail_ == oldChild)
        {
            setIfTrail((PIfTrail) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
