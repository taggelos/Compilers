/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AIfElse extends PIfElse
{
    private PIfHeader _ifHeader_;
    private PStmtWithElse _then_;
    private TElse _else_;
    private PStmtWithElse _elseSt_;

    public AIfElse()
    {
        // Constructor
    }

    public AIfElse(
        @SuppressWarnings("hiding") PIfHeader _ifHeader_,
        @SuppressWarnings("hiding") PStmtWithElse _then_,
        @SuppressWarnings("hiding") TElse _else_,
        @SuppressWarnings("hiding") PStmtWithElse _elseSt_)
    {
        // Constructor
        setIfHeader(_ifHeader_);

        setThen(_then_);

        setElse(_else_);

        setElseSt(_elseSt_);

    }

    @Override
    public Object clone()
    {
        return new AIfElse(
            cloneNode(this._ifHeader_),
            cloneNode(this._then_),
            cloneNode(this._else_),
            cloneNode(this._elseSt_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAIfElse(this);
    }

    public PIfHeader getIfHeader()
    {
        return this._ifHeader_;
    }

    public void setIfHeader(PIfHeader node)
    {
        if(this._ifHeader_ != null)
        {
            this._ifHeader_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ifHeader_ = node;
    }

    public PStmtWithElse getThen()
    {
        return this._then_;
    }

    public void setThen(PStmtWithElse node)
    {
        if(this._then_ != null)
        {
            this._then_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._then_ = node;
    }

    public TElse getElse()
    {
        return this._else_;
    }

    public void setElse(TElse node)
    {
        if(this._else_ != null)
        {
            this._else_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._else_ = node;
    }

    public PStmtWithElse getElseSt()
    {
        return this._elseSt_;
    }

    public void setElseSt(PStmtWithElse node)
    {
        if(this._elseSt_ != null)
        {
            this._elseSt_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._elseSt_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ifHeader_)
            + toString(this._then_)
            + toString(this._else_)
            + toString(this._elseSt_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ifHeader_ == child)
        {
            this._ifHeader_ = null;
            return;
        }

        if(this._then_ == child)
        {
            this._then_ = null;
            return;
        }

        if(this._else_ == child)
        {
            this._else_ = null;
            return;
        }

        if(this._elseSt_ == child)
        {
            this._elseSt_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ifHeader_ == oldChild)
        {
            setIfHeader((PIfHeader) newChild);
            return;
        }

        if(this._then_ == oldChild)
        {
            setThen((PStmtWithElse) newChild);
            return;
        }

        if(this._else_ == oldChild)
        {
            setElse((TElse) newChild);
            return;
        }

        if(this._elseSt_ == oldChild)
        {
            setElseSt((PStmtWithElse) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
