/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AVarDef extends PVarDef
{
    private final LinkedList<TIdentifier> _name_ = new LinkedList<TIdentifier>();
    private PTypes _type_;

    public AVarDef()
    {
        // Constructor
    }

    public AVarDef(
        @SuppressWarnings("hiding") List<?> _name_,
        @SuppressWarnings("hiding") PTypes _type_)
    {
        // Constructor
        setName(_name_);

        setType(_type_);

    }

    @Override
    public Object clone()
    {
        return new AVarDef(
            cloneList(this._name_),
            cloneNode(this._type_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAVarDef(this);
    }

    public LinkedList<TIdentifier> getName()
    {
        return this._name_;
    }

    public void setName(List<?> list)
    {
        for(TIdentifier e : this._name_)
        {
            e.parent(null);
        }
        this._name_.clear();

        for(Object obj_e : list)
        {
            TIdentifier e = (TIdentifier) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._name_.add(e);
        }
    }

    public PTypes getType()
    {
        return this._type_;
    }

    public void setType(PTypes node)
    {
        if(this._type_ != null)
        {
            this._type_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._type_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._type_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_.remove(child))
        {
            return;
        }

        if(this._type_ == child)
        {
            this._type_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<TIdentifier> i = this._name_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._type_ == oldChild)
        {
            setType((PTypes) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
