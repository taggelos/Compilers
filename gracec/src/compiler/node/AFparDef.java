/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import java.util.*;
import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AFparDef extends PFparDef
{
    private TRef _ref_;
    private final LinkedList<TIdentifier> _names_ = new LinkedList<TIdentifier>();
    private PTypes _types_;

    public AFparDef()
    {
        // Constructor
    }

    public AFparDef(
        @SuppressWarnings("hiding") TRef _ref_,
        @SuppressWarnings("hiding") List<?> _names_,
        @SuppressWarnings("hiding") PTypes _types_)
    {
        // Constructor
        setRef(_ref_);

        setNames(_names_);

        setTypes(_types_);

    }

    @Override
    public Object clone()
    {
        return new AFparDef(
            cloneNode(this._ref_),
            cloneList(this._names_),
            cloneNode(this._types_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFparDef(this);
    }

    public TRef getRef()
    {
        return this._ref_;
    }

    public void setRef(TRef node)
    {
        if(this._ref_ != null)
        {
            this._ref_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._ref_ = node;
    }

    public LinkedList<TIdentifier> getNames()
    {
        return this._names_;
    }

    public void setNames(List<?> list)
    {
        for(TIdentifier e : this._names_)
        {
            e.parent(null);
        }
        this._names_.clear();

        for(Object obj_e : list)
        {
            TIdentifier e = (TIdentifier) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._names_.add(e);
        }
    }

    public PTypes getTypes()
    {
        return this._types_;
    }

    public void setTypes(PTypes node)
    {
        if(this._types_ != null)
        {
            this._types_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._types_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._ref_)
            + toString(this._names_)
            + toString(this._types_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._ref_ == child)
        {
            this._ref_ = null;
            return;
        }

        if(this._names_.remove(child))
        {
            return;
        }

        if(this._types_ == child)
        {
            this._types_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._ref_ == oldChild)
        {
            setRef((TRef) newChild);
            return;
        }

        for(ListIterator<TIdentifier> i = this._names_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((TIdentifier) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._types_ == oldChild)
        {
            setTypes((PTypes) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
