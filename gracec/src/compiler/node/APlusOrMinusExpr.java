/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class APlusOrMinusExpr extends PExpr
{
    private PPlusOrMinus _plusOrMinus_;
    private PExpr _expr_;

    public APlusOrMinusExpr()
    {
        // Constructor
    }

    public APlusOrMinusExpr(
        @SuppressWarnings("hiding") PPlusOrMinus _plusOrMinus_,
        @SuppressWarnings("hiding") PExpr _expr_)
    {
        // Constructor
        setPlusOrMinus(_plusOrMinus_);

        setExpr(_expr_);

    }

    @Override
    public Object clone()
    {
        return new APlusOrMinusExpr(
            cloneNode(this._plusOrMinus_),
            cloneNode(this._expr_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAPlusOrMinusExpr(this);
    }

    public PPlusOrMinus getPlusOrMinus()
    {
        return this._plusOrMinus_;
    }

    public void setPlusOrMinus(PPlusOrMinus node)
    {
        if(this._plusOrMinus_ != null)
        {
            this._plusOrMinus_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._plusOrMinus_ = node;
    }

    public PExpr getExpr()
    {
        return this._expr_;
    }

    public void setExpr(PExpr node)
    {
        if(this._expr_ != null)
        {
            this._expr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._plusOrMinus_)
            + toString(this._expr_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._plusOrMinus_ == child)
        {
            this._plusOrMinus_ = null;
            return;
        }

        if(this._expr_ == child)
        {
            this._expr_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._plusOrMinus_ == oldChild)
        {
            setPlusOrMinus((PPlusOrMinus) newChild);
            return;
        }

        if(this._expr_ == oldChild)
        {
            setExpr((PExpr) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
