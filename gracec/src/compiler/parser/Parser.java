/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAfundef1FunDef */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AAfundef2FunDef */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AHeader */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AAsimpleparfpardef1FparDef */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list);
            }
            break;
            case 5: /* reduce AAsimpleparfpardef2FparDef */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AAmultparfpardef1FparDef */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AAmultparfpardef2FparDef */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AAmulttypesfpardef1FparDef */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AAmulttypesfpardef2FparDef */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce AAsemiparfpardef1FparDef */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list);
            }
            break;
            case 11: /* reduce AAsemiparfpardef2FparDef */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list);
            }
            break;
            case 12: /* reduce ANoneFparDef */
            {
                ArrayList<Object> list = new12();
                push(goTo(3), list);
            }
            break;
            case 13: /* reduce AIntDataTypes */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list);
            }
            break;
            case 14: /* reduce ACharDataTypes */
            {
                ArrayList<Object> list = new14();
                push(goTo(4), list);
            }
            break;
            case 15: /* reduce AAbracketsarraytypes1ArrayTypes */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce AAbracketsarraytypes2ArrayTypes */
            {
                ArrayList<Object> list = new16();
                push(goTo(5), list);
            }
            break;
            case 17: /* reduce ASimpleTypes */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce AArrayTypes */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list);
            }
            break;
            case 19: /* reduce ASimpleReturnType */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce ANoneReturnType */
            {
                ArrayList<Object> list = new20();
                push(goTo(7), list);
            }
            break;
            case 21: /* reduce AFunLocalDef */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce ADecLocalDef */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce AVarLocalDef */
            {
                ArrayList<Object> list = new23();
                push(goTo(8), list);
            }
            break;
            case 24: /* reduce AFunDec */
            {
                ArrayList<Object> list = new24();
                push(goTo(9), list);
            }
            break;
            case 25: /* reduce AAblock1Block */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list);
            }
            break;
            case 26: /* reduce AAblock2Block */
            {
                ArrayList<Object> list = new26();
                push(goTo(10), list);
            }
            break;
            case 27: /* reduce ASemiStmt */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list);
            }
            break;
            case 28: /* reduce AAssignmentStmt */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce ABlockStmt */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list);
            }
            break;
            case 30: /* reduce AFunCalStmt */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list);
            }
            break;
            case 31: /* reduce AIfstmtStmt */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list);
            }
            break;
            case 32: /* reduce AWhilestmtStmt */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list);
            }
            break;
            case 33: /* reduce AReturnstmtStmt */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list);
            }
            break;
            case 34: /* reduce AAssignment */
            {
                ArrayList<Object> list = new34();
                push(goTo(12), list);
            }
            break;
            case 35: /* reduce AIdLVal */
            {
                ArrayList<Object> list = new35();
                push(goTo(13), list);
            }
            break;
            case 36: /* reduce AStringLVal */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce AIdBracketsLVal */
            {
                ArrayList<Object> list = new37();
                push(goTo(13), list);
            }
            break;
            case 38: /* reduce AFunCal */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list);
            }
            break;
            case 39: /* reduce ASimpleExprList */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list);
            }
            break;
            case 40: /* reduce AListExprList */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list);
            }
            break;
            case 41: /* reduce ANoneExprList */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list);
            }
            break;
            case 42: /* reduce AVarDef */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list);
            }
            break;
            case 43: /* reduce AIdVarIds */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list);
            }
            break;
            case 44: /* reduce AListVarIds */
            {
                ArrayList<Object> list = new44();
                push(goTo(17), list);
            }
            break;
            case 45: /* reduce AWhilestmt */
            {
                ArrayList<Object> list = new45();
                push(goTo(18), list);
            }
            break;
            case 46: /* reduce AWhileWithElse */
            {
                ArrayList<Object> list = new46();
                push(goTo(19), list);
            }
            break;
            case 47: /* reduce AIfstmt */
            {
                ArrayList<Object> list = new47();
                push(goTo(20), list);
            }
            break;
            case 48: /* reduce AIfHeader */
            {
                ArrayList<Object> list = new48();
                push(goTo(21), list);
            }
            break;
            case 49: /* reduce ANoElseIfTrail */
            {
                ArrayList<Object> list = new49();
                push(goTo(22), list);
            }
            break;
            case 50: /* reduce AWithElseIfTrail */
            {
                ArrayList<Object> list = new50();
                push(goTo(22), list);
            }
            break;
            case 51: /* reduce ASemiStmtWithElse */
            {
                ArrayList<Object> list = new51();
                push(goTo(23), list);
            }
            break;
            case 52: /* reduce AAssignmentStmtWithElse */
            {
                ArrayList<Object> list = new52();
                push(goTo(23), list);
            }
            break;
            case 53: /* reduce AStmtReturnstmtStmtWithElse */
            {
                ArrayList<Object> list = new53();
                push(goTo(23), list);
            }
            break;
            case 54: /* reduce AStmtFuncalStmtWithElse */
            {
                ArrayList<Object> list = new54();
                push(goTo(23), list);
            }
            break;
            case 55: /* reduce ABlockStmtWithElse */
            {
                ArrayList<Object> list = new55();
                push(goTo(23), list);
            }
            break;
            case 56: /* reduce AIfstmtStmtWithElse */
            {
                ArrayList<Object> list = new56();
                push(goTo(23), list);
            }
            break;
            case 57: /* reduce AWhilestmtStmtWithElse */
            {
                ArrayList<Object> list = new57();
                push(goTo(23), list);
            }
            break;
            case 58: /* reduce AIfElse */
            {
                ArrayList<Object> list = new58();
                push(goTo(24), list);
            }
            break;
            case 59: /* reduce ACondAndCond */
            {
                ArrayList<Object> list = new59();
                push(goTo(25), list);
            }
            break;
            case 60: /* reduce AOrExprCond */
            {
                ArrayList<Object> list = new60();
                push(goTo(25), list);
            }
            break;
            case 61: /* reduce ACondNotConditionalAndExpression */
            {
                ArrayList<Object> list = new61();
                push(goTo(26), list);
            }
            break;
            case 62: /* reduce AAndExprConditionalAndExpression */
            {
                ArrayList<Object> list = new62();
                push(goTo(26), list);
            }
            break;
            case 63: /* reduce ANotExprConditionalNotExpression */
            {
                ArrayList<Object> list = new63();
                push(goTo(27), list);
            }
            break;
            case 64: /* reduce AComparativeConditionalNotExpression */
            {
                ArrayList<Object> list = new64();
                push(goTo(27), list);
            }
            break;
            case 65: /* reduce ARelationalComparativeExpression */
            {
                ArrayList<Object> list = new65();
                push(goTo(28), list);
            }
            break;
            case 66: /* reduce AEqualComparativeExpression */
            {
                ArrayList<Object> list = new66();
                push(goTo(28), list);
            }
            break;
            case 67: /* reduce ANotEqualComparativeExpression */
            {
                ArrayList<Object> list = new67();
                push(goTo(28), list);
            }
            break;
            case 68: /* reduce AAdditiveRelationalExpression */
            {
                ArrayList<Object> list = new68();
                push(goTo(29), list);
            }
            break;
            case 69: /* reduce ALessThanRelationalExpression */
            {
                ArrayList<Object> list = new69();
                push(goTo(29), list);
            }
            break;
            case 70: /* reduce AGreaterThanRelationalExpression */
            {
                ArrayList<Object> list = new70();
                push(goTo(29), list);
            }
            break;
            case 71: /* reduce AGreaterEqualThanRelationalExpression */
            {
                ArrayList<Object> list = new71();
                push(goTo(29), list);
            }
            break;
            case 72: /* reduce ALessEqualThanRelationalExpression */
            {
                ArrayList<Object> list = new72();
                push(goTo(29), list);
            }
            break;
            case 73: /* reduce AAsemireturnstmt1Returnstmt */
            {
                ArrayList<Object> list = new73();
                push(goTo(30), list);
            }
            break;
            case 74: /* reduce AAsemireturnstmt2Returnstmt */
            {
                ArrayList<Object> list = new74();
                push(goTo(30), list);
            }
            break;
            case 75: /* reduce AFactorExpr */
            {
                ArrayList<Object> list = new75();
                push(goTo(31), list);
            }
            break;
            case 76: /* reduce AAddExpr */
            {
                ArrayList<Object> list = new76();
                push(goTo(31), list);
            }
            break;
            case 77: /* reduce ASubExpr */
            {
                ArrayList<Object> list = new77();
                push(goTo(31), list);
            }
            break;
            case 78: /* reduce ATermFactor */
            {
                ArrayList<Object> list = new78();
                push(goTo(32), list);
            }
            break;
            case 79: /* reduce AMultFactor */
            {
                ArrayList<Object> list = new79();
                push(goTo(32), list);
            }
            break;
            case 80: /* reduce AModFactor */
            {
                ArrayList<Object> list = new80();
                push(goTo(32), list);
            }
            break;
            case 81: /* reduce ADivFactor */
            {
                ArrayList<Object> list = new81();
                push(goTo(32), list);
            }
            break;
            case 82: /* reduce APlusOrMinusTerm */
            {
                ArrayList<Object> list = new82();
                push(goTo(33), list);
            }
            break;
            case 83: /* reduce AIntTerm */
            {
                ArrayList<Object> list = new83();
                push(goTo(33), list);
            }
            break;
            case 84: /* reduce ACharTerm */
            {
                ArrayList<Object> list = new84();
                push(goTo(33), list);
            }
            break;
            case 85: /* reduce ALValTerm */
            {
                ArrayList<Object> list = new85();
                push(goTo(33), list);
            }
            break;
            case 86: /* reduce AFunCalTerm */
            {
                ArrayList<Object> list = new86();
                push(goTo(33), list);
            }
            break;
            case 87: /* reduce AParTerm */
            {
                ArrayList<Object> list = new87();
                push(goTo(33), list);
            }
            break;
            case 88: /* reduce APlusPlusOrMinus */
            {
                ArrayList<Object> list = new88();
                push(goTo(34), list);
            }
            break;
            case 89: /* reduce AMinusPlusOrMinus */
            {
                ArrayList<Object> list = new89();
                push(goTo(34), list);
            }
            break;
            case 90: /* reduce ATerminal$LocalDef */
            {
                ArrayList<Object> list = new90();
                push(goTo(35), list);
            }
            break;
            case 91: /* reduce ANonTerminal$LocalDef */
            {
                ArrayList<Object> list = new91();
                push(goTo(35), list);
            }
            break;
            case 92: /* reduce ATerminal$ArrayTypes */
            {
                ArrayList<Object> list = new92();
                push(goTo(36), list);
            }
            break;
            case 93: /* reduce ANonTerminal$ArrayTypes */
            {
                ArrayList<Object> list = new93();
                push(goTo(36), list);
            }
            break;
            case 94: /* reduce ATerminal$Stmt */
            {
                ArrayList<Object> list = new94();
                push(goTo(37), list);
            }
            break;
            case 95: /* reduce ANonTerminal$Stmt */
            {
                ArrayList<Object> list = new95();
                push(goTo(37), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFunDef pfundefNode2;
        pfundefNode2 = (PFunDef)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfundefNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAfundef1FunDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunDef pfundefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pfundefNode1 = new AFunDef(pheaderNode2, listNode3, listNode5);
        }
	nodeList.add(pfundefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAfundef2FunDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunDef pfundefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pfundefNode1 = new AFunDef(pheaderNode2, listNode4, listNode6);
        }
	nodeList.add(pfundefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        PFparDef pfpardefNode3;
        PReturnType preturntypeNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList2.get(0);
        pfpardefNode3 = (PFparDef)nodeArrayList4.get(0);
        preturntypeNode4 = (PReturnType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeader(tidentifierNode2, pfpardefNode3, preturntypeNode4);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAsimpleparfpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        PTypes ptypesNode4;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        ptypesNode4 = (PTypes)nodeArrayList3.get(0);

        pfpardefNode1 = new ASimpleParFparDef(null, tidentifierNode3, ptypesNode4);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAsimpleparfpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TIdentifier tidentifierNode3;
        PTypes ptypesNode4;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        ptypesNode4 = (PTypes)nodeArrayList4.get(0);

        pfpardefNode1 = new ASimpleParFparDef(trefNode2, tidentifierNode3, ptypesNode4);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAmultparfpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        PFparDef pfpardefNode4;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        pfpardefNode4 = (PFparDef)nodeArrayList3.get(0);

        pfpardefNode1 = new AMultParFparDef(null, tidentifierNode3, pfpardefNode4);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAmultparfpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TIdentifier tidentifierNode3;
        PFparDef pfpardefNode4;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        pfpardefNode4 = (PFparDef)nodeArrayList4.get(0);

        pfpardefNode1 = new AMultParFparDef(trefNode2, tidentifierNode3, pfpardefNode4);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAmulttypesfpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        PTypes ptypesNode4;
        PFparDef pfpardefNode5;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        ptypesNode4 = (PTypes)nodeArrayList3.get(0);
        pfpardefNode5 = (PFparDef)nodeArrayList5.get(0);

        pfpardefNode1 = new AMultTypesFparDef(null, tidentifierNode3, ptypesNode4, pfpardefNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAmulttypesfpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TIdentifier tidentifierNode3;
        PTypes ptypesNode4;
        PFparDef pfpardefNode5;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        ptypesNode4 = (PTypes)nodeArrayList4.get(0);
        pfpardefNode5 = (PFparDef)nodeArrayList6.get(0);

        pfpardefNode1 = new AMultTypesFparDef(trefNode2, tidentifierNode3, ptypesNode4, pfpardefNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAsemiparfpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        PTypes ptypesNode4;
        PFparDef pfpardefNode5;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        ptypesNode4 = (PTypes)nodeArrayList3.get(0);
        pfpardefNode5 = (PFparDef)nodeArrayList5.get(0);

        pfpardefNode1 = new ASemiParFparDef(null, tidentifierNode3, ptypesNode4, pfpardefNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAsemiparfpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TIdentifier tidentifierNode3;
        PTypes ptypesNode4;
        PFparDef pfpardefNode5;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        ptypesNode4 = (PTypes)nodeArrayList4.get(0);
        pfpardefNode5 = (PFparDef)nodeArrayList6.get(0);

        pfpardefNode1 = new ASemiParFparDef(trefNode2, tidentifierNode3, ptypesNode4, pfpardefNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ANoneFparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFparDef pfpardefNode1;
        {
            // Block

        pfpardefNode1 = new ANoneFparDef();
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AIntDataTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataTypes pdatatypesNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pdatatypesNode1 = new AIntDataTypes(tintNode2);
        }
	nodeList.add(pdatatypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ACharDataTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataTypes pdatatypesNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pdatatypesNode1 = new ACharDataTypes(tcharNode2);
        }
	nodeList.add(pdatatypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAbracketsarraytypes1ArrayTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayTypes parraytypesNode1;
        {
            // Block
        TLBr tlbrNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRBr trbrNode4;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        trbrNode4 = (TRBr)nodeArrayList2.get(0);

        parraytypesNode1 = new ABracketsArrayTypes(tlbrNode2, null, trbrNode4);
        }
	nodeList.add(parraytypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AAbracketsarraytypes2ArrayTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayTypes parraytypesNode1;
        {
            // Block
        TLBr tlbrNode2;
        TIntegers tintegersNode3;
        TRBr trbrNode4;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        tintegersNode3 = (TIntegers)nodeArrayList2.get(0);
        trbrNode4 = (TRBr)nodeArrayList3.get(0);

        parraytypesNode1 = new ABracketsArrayTypes(tlbrNode2, tintegersNode3, trbrNode4);
        }
	nodeList.add(parraytypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ASimpleTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypes ptypesNode1;
        {
            // Block
        PDataTypes pdatatypesNode2;
        pdatatypesNode2 = (PDataTypes)nodeArrayList1.get(0);

        ptypesNode1 = new ASimpleTypes(pdatatypesNode2);
        }
	nodeList.add(ptypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AArrayTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypes ptypesNode1;
        {
            // Block
        PDataTypes pdatatypesNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pdatatypesNode2 = (PDataTypes)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypesNode1 = new AArrayTypes(pdatatypesNode2, listNode4);
        }
	nodeList.add(ptypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ASimpleReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block
        PDataTypes pdatatypesNode2;
        pdatatypesNode2 = (PDataTypes)nodeArrayList1.get(0);

        preturntypeNode1 = new ASimpleReturnType(pdatatypesNode2);
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ANoneReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block
        TNothing tnothingNode2;
        tnothingNode2 = (TNothing)nodeArrayList1.get(0);

        preturntypeNode1 = new ANoneReturnType(tnothingNode2);
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AFunLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFunDef pfundefNode2;
        pfundefNode2 = (PFunDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AFunLocalDef(pfundefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ADecLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFunDec pfundecNode2;
        pfundecNode2 = (PFunDec)nodeArrayList1.get(0);

        plocaldefNode1 = new ADecLocalDef(pfundecNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AVarLocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new AVarLocalDef(pvardefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AFunDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunDec pfundecNode1;
        {
            // Block
        PHeader pheaderNode2;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);

        pfundecNode1 = new AFunDec(pheaderNode2);
        }
	nodeList.add(pfundecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AAblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        listNode1 = (LinkedList)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode2.addAll(listNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ASemiStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new ASemiStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AAssignmentStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ABlockStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstmtNode1 = new ABlockStmt(listNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AFunCalStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PFunCal pfuncalNode2;
        pfuncalNode2 = (PFunCal)nodeArrayList1.get(0);

        pstmtNode1 = new AFunCalStmt(pfuncalNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AIfstmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AWhilestmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AReturnstmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pstmtNode1 = new AReturnstmtStmt(pexprNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLVal plvalNode2;
        PExpr pexprNode3;
        plvalNode2 = (PLVal)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pstmtNode1 = new AAssignmentStmt(plvalNode2, pexprNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AIdLVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLVal plvalNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        plvalNode1 = new AIdLVal(tidentifierNode2);
        }
	nodeList.add(plvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AStringLVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLVal plvalNode1;
        {
            // Block
        TStringLiteral tstringliteralNode2;
        tstringliteralNode2 = (TStringLiteral)nodeArrayList1.get(0);

        plvalNode1 = new AStringLVal(tstringliteralNode2);
        }
	nodeList.add(plvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AIdBracketsLVal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLVal plvalNode1;
        {
            // Block
        PLVal plvalNode2;
        PExpr pexprNode3;
        plvalNode2 = (PLVal)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        plvalNode1 = new AIdBracketsLVal(plvalNode2, pexprNode3);
        }
	nodeList.add(plvalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AFunCal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunCal pfuncalNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pfuncalNode1 = new AFunCal(tidentifierNode2, listNode4);
        }
	nodeList.add(pfuncalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce ASimpleExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	if(pexprNode1 != null)
	{
	  listNode2.add(pexprNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AListExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PExpr pexprNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pexprNode2 = (PExpr)nodeArrayList3.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pexprNode2 != null)
	{
	  listNode3.add(pexprNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ANoneExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        LinkedList<Object> listNode1 = new LinkedList<Object>();
        {
            // Block
        }
	nodeList.add(listNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AVarDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PTypes ptypesNode4;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        ptypesNode4 = (PTypes)nodeArrayList4.get(0);

        pvardefNode1 = new AVarDef(listNode3, ptypesNode4);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AIdVarIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode1;
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode2.add(tidentifierNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AListVarIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        TIdentifier tidentifierNode1;
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        tidentifierNode1 = (TIdentifier)nodeArrayList1.get(0);
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(tidentifierNode1 != null)
	{
	  listNode3.add(tidentifierNode1);
	}
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AWhilestmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        PStmt pstmtNode3;
        pstmtNode3 = (PStmt)nodeArrayList4.get(0);
	if(pstmtNode3 != null)
	{
	  listNode4.add(pstmtNode3);
	}
        }

        pstmtNode1 = new AWhilestmtStmt(pexprNode2, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AWhileWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexprNode2 = (PExpr)nodeArrayList2.get(0);
        {
            // Block
        PStmt pstmtNode3;
        pstmtNode3 = (PStmt)nodeArrayList4.get(0);
	if(pstmtNode3 != null)
	{
	  listNode4.add(pstmtNode3);
	}
        }

        pstmtNode1 = new AWhilestmtStmt(pexprNode2, listNode4);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce AIfstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PIfHeader pifheaderNode2;
        PIfTrail piftrailNode3;
        pifheaderNode2 = (PIfHeader)nodeArrayList1.get(0);
        piftrailNode3 = (PIfTrail)nodeArrayList2.get(0);

        pstmtNode1 = new AIfstmtStmt(pifheaderNode2, piftrailNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AIfHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfHeader pifheaderNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pifheaderNode1 = new AIfHeader(pexprNode2);
        }
	nodeList.add(pifheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ANoElseIfTrail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfTrail piftrailNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode2;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }

        piftrailNode1 = new ANoElseIfTrail(listNode3);
        }
	nodeList.add(piftrailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AWithElseIfTrail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfTrail piftrailNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode2;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
        {
            // Block
        PStmt pstmtNode4;
        pstmtNode4 = (PStmt)nodeArrayList3.get(0);
	if(pstmtNode4 != null)
	{
	  listNode5.add(pstmtNode4);
	}
        }

        piftrailNode1 = new AWithElseIfTrail(listNode3, listNode5);
        }
	nodeList.add(piftrailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ASemiStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block

        pstmtNode1 = new ASemiStmt();
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAssignmentStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AStmtReturnstmtStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pstmtNode1 = new AReturnstmtStmt(pexprNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AStmtFuncalStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PFunCal pfuncalNode2;
        pfuncalNode2 = (PFunCal)nodeArrayList1.get(0);

        pstmtNode1 = new AFunCalStmt(pfuncalNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce ABlockStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pstmtNode1 = new ABlockStmt(listNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AIfstmtStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AWhilestmtStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AIfElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PIfHeader pifheaderNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pifheaderNode2 = (PIfHeader)nodeArrayList1.get(0);
        {
            // Block
        PStmt pstmtNode3;
        pstmtNode3 = (PStmt)nodeArrayList2.get(0);
	if(pstmtNode3 != null)
	{
	  listNode4.add(pstmtNode3);
	}
        }
        {
            // Block
        PStmt pstmtNode5;
        pstmtNode5 = (PStmt)nodeArrayList4.get(0);
	if(pstmtNode5 != null)
	{
	  listNode6.add(pstmtNode5);
	}
        }

        pstmtNode1 = new AIfElseStmt(pifheaderNode2, listNode4, listNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce ACondAndCond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AOrExprCond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AOrExprExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ACondNotConditionalAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AAndExprConditionalAndExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAndExprExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANotExprConditionalNotExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList2.get(0);

        pexprNode1 = new ANotExprExpr(pexprNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AComparativeConditionalNotExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ARelationalComparativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AEqualComparativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AEqualExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANotEqualComparativeExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ANotEqualExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AAdditiveRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ALessThanRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ALessThanExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AGreaterThanRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AGreaterThanExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce AGreaterEqualThanRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AGreaterEqualThanExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ALessEqualThanRelationalExpression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ALessEqualThanExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce AAsemireturnstmt1Returnstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        @SuppressWarnings("unused") Object nullNode1 = null;
	nodeList.add(nullNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce AAsemireturnstmt2Returnstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce AFactorExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce AAddExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AAddExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ASubExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ASubExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ATermFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList1.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new79() /* reduce AMultFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AMultExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new80() /* reduce AModFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new AModExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new81() /* reduce ADivFactor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PExpr pexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList3.get(0);

        pexprNode1 = new ADivExpr(pexprNode2, pexprNode3);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new82() /* reduce APlusOrMinusTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new83() /* reduce AIntTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TIntegers tintegersNode2;
        tintegersNode2 = (TIntegers)nodeArrayList1.get(0);

        pexprNode1 = new AIntExpr(tintegersNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new84() /* reduce ACharTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        TCharConst tcharconstNode2;
        tcharconstNode2 = (TCharConst)nodeArrayList1.get(0);

        pexprNode1 = new ACharExpr(tcharconstNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new85() /* reduce ALValTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PLVal plvalNode2;
        plvalNode2 = (PLVal)nodeArrayList1.get(0);

        pexprNode1 = new ALValExpr(plvalNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new86() /* reduce AFunCalTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFunCal pfuncalNode2;
        pfuncalNode2 = (PFunCal)nodeArrayList1.get(0);

        pexprNode1 = new AFunCalExpr(pfuncalNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new87() /* reduce AParTerm */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        pexprNode1 = (PExpr)nodeArrayList2.get(0);
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new88() /* reduce APlusPlusOrMinus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new89() /* reduce AMinusPlusOrMinus */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new90() /* reduce ATerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new91() /* reduce ANonTerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new92() /* reduce ATerminal$ArrayTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArrayTypes parraytypesNode1;
        parraytypesNode1 = (PArrayTypes)nodeArrayList1.get(0);
	if(parraytypesNode1 != null)
	{
	  listNode2.add(parraytypesNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new93() /* reduce ANonTerminal$ArrayTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArrayTypes parraytypesNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parraytypesNode2 = (PArrayTypes)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parraytypesNode2 != null)
	{
	  listNode3.add(parraytypesNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new94() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new95() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {6, SHIFT, 1}, },
			{{-1, ERROR, 1}, {18, SHIFT, 5}, },
			{{-1, ERROR, 2}, {41, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {6, SHIFT, 1}, {16, SHIFT, 6}, {35, SHIFT, 7}, },
			{{-1, ERROR, 5}, {31, SHIFT, 15}, },
			{{-1, ERROR, 6}, {18, SHIFT, 16}, },
			{{-1, ERROR, 7}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 20}, {18, SHIFT, 21}, {21, SHIFT, 22}, {35, SHIFT, 7}, {36, SHIFT, 23}, {38, SHIFT, 24}, },
			{{-1, REDUCE, 21}, },
			{{-1, ERROR, 9}, {6, SHIFT, 1}, {16, SHIFT, 6}, {35, SHIFT, 7}, {38, SHIFT, 35}, },
			{{-1, REDUCE, 90}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 14}, {6, SHIFT, 1}, {16, SHIFT, 6}, {35, SHIFT, 7}, },
			{{-1, REDUCE, 12}, {13, SHIFT, 38}, {18, SHIFT, 39}, },
			{{-1, REDUCE, 43}, {37, SHIFT, 41}, },
			{{-1, ERROR, 17}, {39, SHIFT, 42}, },
			{{-1, ERROR, 18}, {10, SHIFT, 43}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 19}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, {38, SHIFT, 60}, },
			{{-1, ERROR, 20}, {10, SHIFT, 43}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 35}, {31, SHIFT, 63}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 94}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 28}, {33, SHIFT, 64}, {40, SHIFT, 65}, },
			{{-1, ERROR, 29}, {38, SHIFT, 66}, },
			{{-1, REDUCE, 32}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 32}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 67}, {18, SHIFT, 21}, {21, SHIFT, 22}, {35, SHIFT, 7}, {38, SHIFT, 68}, },
			{{-1, REDUCE, 33}, },
			{{-1, ERROR, 34}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 20}, {18, SHIFT, 21}, {21, SHIFT, 22}, {35, SHIFT, 7}, {36, SHIFT, 79}, {38, SHIFT, 24}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 91}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 38}, {18, SHIFT, 81}, },
			{{-1, ERROR, 39}, {37, SHIFT, 82}, {39, SHIFT, 83}, },
			{{-1, ERROR, 40}, {32, SHIFT, 84}, },
			{{-1, ERROR, 41}, {18, SHIFT, 16}, },
			{{-1, ERROR, 42}, {2, SHIFT, 86}, {8, SHIFT, 87}, },
			{{-1, ERROR, 43}, {10, SHIFT, 43}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 83}, },
			{{-1, REDUCE, 84}, },
			{{-1, REDUCE, 89}, },
			{{-1, REDUCE, 88}, },
			{{-1, ERROR, 48}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 85}, {33, SHIFT, 64}, },
			{{-1, REDUCE, 86}, },
			{{-1, ERROR, 51}, {12, SHIFT, 92}, {15, SHIFT, 93}, },
			{{-1, REDUCE, 59}, {1, SHIFT, 94}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 64}, {25, SHIFT, 95}, {26, SHIFT, 96}, },
			{{-1, REDUCE, 65}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, },
			{{-1, REDUCE, 68}, {22, SHIFT, 101}, {23, SHIFT, 102}, },
			{{-1, REDUCE, 75}, {3, SHIFT, 103}, {9, SHIFT, 104}, {24, SHIFT, 105}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 59}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 73}, },
			{{-1, ERROR, 61}, {22, SHIFT, 101}, {23, SHIFT, 102}, {38, SHIFT, 107}, },
			{{-1, ERROR, 62}, {4, SHIFT, 108}, {12, SHIFT, 92}, },
			{{-1, REDUCE, 41}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 64}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 65}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 30}, },
			{{-1, ERROR, 67}, {10, SHIFT, 43}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 27}, {5, REDUCE, 51}, },
			{{-1, REDUCE, 29}, {5, REDUCE, 55}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 28}, {5, REDUCE, 52}, },
			{{-1, ERROR, 72}, {38, SHIFT, 114}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 74}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 67}, {18, SHIFT, 21}, {21, SHIFT, 22}, {35, SHIFT, 7}, {38, SHIFT, 68}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 76}, {5, SHIFT, 116}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 33}, {5, REDUCE, 53}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 95}, },
			{{-1, ERROR, 81}, {37, SHIFT, 117}, {39, SHIFT, 118}, },
			{{-1, REDUCE, 12}, {13, SHIFT, 38}, {18, SHIFT, 39}, },
			{{-1, ERROR, 83}, {2, SHIFT, 86}, {8, SHIFT, 87}, },
			{{-1, ERROR, 84}, {39, SHIFT, 121}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 17}, {33, SHIFT, 122}, },
			{{-1, ERROR, 89}, {38, SHIFT, 125}, },
			{{-1, REDUCE, 63}, },
			{{-1, ERROR, 91}, {22, SHIFT, 101}, {23, SHIFT, 102}, {32, SHIFT, 126}, },
			{{-1, ERROR, 92}, {10, SHIFT, 43}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 48}, },
			{{-1, ERROR, 94}, {10, SHIFT, 43}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 95}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 96}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 97}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 98}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 99}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 100}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 101}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 102}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 103}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 104}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, ERROR, 105}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 82}, },
			{{-1, REDUCE, 74}, },
			{{-1, ERROR, 108}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 20}, {18, SHIFT, 21}, {21, SHIFT, 22}, {35, SHIFT, 7}, {38, SHIFT, 24}, },
			{{-1, ERROR, 109}, {32, SHIFT, 141}, {37, SHIFT, 142}, },
			{{-1, REDUCE, 39}, {22, SHIFT, 101}, {23, SHIFT, 102}, },
			{{-1, ERROR, 111}, {22, SHIFT, 101}, {23, SHIFT, 102}, {34, SHIFT, 143}, },
			{{-1, ERROR, 112}, {22, SHIFT, 101}, {23, SHIFT, 102}, {38, SHIFT, 144}, },
			{{-1, ERROR, 113}, {4, SHIFT, 145}, {12, SHIFT, 92}, },
			{{-1, REDUCE, 30}, {5, REDUCE, 54}, },
			{{-1, ERROR, 115}, {5, SHIFT, 146}, },
			{{-1, ERROR, 116}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 20}, {18, SHIFT, 21}, {21, SHIFT, 22}, {35, SHIFT, 7}, {38, SHIFT, 24}, },
			{{-1, REDUCE, 12}, {13, SHIFT, 38}, {18, SHIFT, 39}, },
			{{-1, ERROR, 118}, {2, SHIFT, 86}, {8, SHIFT, 87}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 4}, {37, SHIFT, 150}, {38, SHIFT, 151}, },
			{{-1, ERROR, 121}, {2, SHIFT, 86}, {8, SHIFT, 87}, {11, SHIFT, 152}, },
			{{-1, ERROR, 122}, {19, SHIFT, 155}, {34, SHIFT, 156}, },
			{{-1, REDUCE, 92}, },
			{{-1, REDUCE, 18}, {33, SHIFT, 122}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 87}, },
			{{-1, REDUCE, 60}, {1, SHIFT, 94}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 67}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, },
			{{-1, REDUCE, 66}, {27, SHIFT, 97}, {28, SHIFT, 98}, {29, SHIFT, 99}, {30, SHIFT, 100}, },
			{{-1, REDUCE, 69}, {22, SHIFT, 101}, {23, SHIFT, 102}, },
			{{-1, REDUCE, 70}, {22, SHIFT, 101}, {23, SHIFT, 102}, },
			{{-1, REDUCE, 72}, {22, SHIFT, 101}, {23, SHIFT, 102}, },
			{{-1, REDUCE, 71}, {22, SHIFT, 101}, {23, SHIFT, 102}, },
			{{-1, REDUCE, 77}, {3, SHIFT, 103}, {9, SHIFT, 104}, {24, SHIFT, 105}, },
			{{-1, REDUCE, 76}, {3, SHIFT, 103}, {9, SHIFT, 104}, {24, SHIFT, 105}, },
			{{-1, REDUCE, 81}, },
			{{-1, REDUCE, 80}, },
			{{-1, REDUCE, 79}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 142}, {18, SHIFT, 21}, {19, SHIFT, 44}, {20, SHIFT, 45}, {21, SHIFT, 22}, {22, SHIFT, 46}, {23, SHIFT, 47}, {31, SHIFT, 48}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 145}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 67}, {18, SHIFT, 21}, {21, SHIFT, 22}, {35, SHIFT, 7}, {38, SHIFT, 68}, },
			{{-1, ERROR, 146}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 67}, {18, SHIFT, 21}, {21, SHIFT, 22}, {35, SHIFT, 7}, {38, SHIFT, 68}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 5}, {37, SHIFT, 161}, {38, SHIFT, 162}, },
			{{-1, REDUCE, 12}, {13, SHIFT, 38}, {18, SHIFT, 39}, },
			{{-1, REDUCE, 12}, {13, SHIFT, 38}, {18, SHIFT, 39}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 155}, {34, SHIFT, 165}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 93}, },
			{{-1, REDUCE, 40}, {22, SHIFT, 101}, {23, SHIFT, 102}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 12}, {13, SHIFT, 38}, {18, SHIFT, 39}, },
			{{-1, REDUCE, 12}, {13, SHIFT, 38}, {18, SHIFT, 39}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 11}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, {0, 3}, },
			{{-1, 9}, {0, 4}, },
			{{-1, 40}, {82, 119}, {117, 148}, {150, 163}, {151, 164}, {161, 166}, {162, 167}, },
			{{-1, 88}, {121, 153}, },
			{{-1, 123}, {124, 157}, },
			{{-1, 89}, {83, 120}, {118, 149}, },
			{{-1, 154}, },
			{{-1, 10}, {14, 36}, },
			{{-1, 11}, },
			{{-1, 25}, {4, 12}, {9, 12}, {14, 37}, {32, 69}, {74, 69}, {145, 69}, {146, 69}, },
			{{-1, 70}, {7, 26}, {34, 80}, {108, 140}, {116, 147}, {145, 140}, {146, 147}, },
			{{-1, 27}, {32, 71}, {74, 71}, {145, 71}, {146, 71}, },
			{{-1, 49}, {7, 28}, {32, 28}, {34, 28}, {74, 28}, {108, 28}, {116, 28}, {145, 28}, {146, 28}, },
			{{-1, 50}, {7, 29}, {32, 72}, {34, 29}, {74, 72}, {108, 29}, {116, 29}, {145, 72}, {146, 72}, },
			{{-1, 109}, },
			{{-1, 13}, },
			{{-1, 17}, {41, 85}, },
			{{-1, 30}, },
			{{-1, 73}, },
			{{-1, 31}, },
			{{-1, 32}, {32, 74}, {74, 74}, {145, 74}, {146, 74}, },
			{{-1, 75}, },
			{{-1, 76}, {74, 115}, {145, 159}, {146, 160}, },
			{{-1, 77}, },
			{{-1, 51}, {20, 62}, {67, 113}, },
			{{-1, 52}, {92, 127}, },
			{{-1, 53}, {43, 90}, {94, 128}, },
			{{-1, 54}, },
			{{-1, 55}, {95, 129}, {96, 130}, },
			{{-1, 33}, {32, 78}, {74, 78}, {145, 78}, {146, 78}, },
			{{-1, 56}, {19, 61}, {48, 91}, {63, 110}, {64, 111}, {65, 112}, {97, 131}, {98, 132}, {99, 133}, {100, 134}, {142, 158}, },
			{{-1, 57}, {101, 135}, {102, 136}, },
			{{-1, 58}, {59, 106}, {103, 137}, {104, 138}, {105, 139}, },
			{{-1, 59}, },
			{{-1, 14}, },
			{{-1, 124}, },
			{{-1, 34}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'fun', 'var', '{'",
			"expecting: '('",
			"expecting: 'if', 'return', 'while', identifier, string literal, '{', '}', ';'",
			"expecting: 'fun', 'var', '{', ';'",
			"expecting: 'fun', 'var', '{', EOF",
			"expecting: 'ref', identifier, ')'",
			"expecting: ',', ':'",
			"expecting: ':'",
			"expecting: 'not', identifier, integers, char const, string literal, '-', '+', '('",
			"expecting: identifier, integers, char const, string literal, '-', '+', '(', ';'",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '-', '+', '*', '#', '=', '<', '>', '<=', '>=', '(', ')', '[', ']', ',', ';', '<-'",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '-', '+', '*', '#', '=', '<', '>', '<=', '>=', ')', '[', ']', ',', ';', '<-'",
			"expecting: 'else', 'fun', 'if', 'return', 'var', 'while', identifier, string literal, '{', '}', ';', EOF",
			"expecting: '[', '<-'",
			"expecting: ';'",
			"expecting: 'if', 'return', 'while', identifier, string literal, '{', ';'",
			"expecting: ')'",
			"expecting: 'char', 'int'",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '-', '+', '*', '#', '=', '<', '>', '<=', '>=', ')', ']', ',', ';'",
			"expecting: identifier, integers, char const, string literal, '-', '+', '('",
			"expecting: 'and', 'div', 'do', 'mod', 'or', 'then', '-', '+', '*', '#', '=', '<', '>', '<=', '>=', ')', '[', ']', ',', ';'",
			"expecting: 'or', 'then'",
			"expecting: 'and', 'do', 'or', 'then'",
			"expecting: 'and', 'do', 'or', 'then', '#', '='",
			"expecting: 'and', 'do', 'or', 'then', '#', '=', '<', '>', '<=', '>='",
			"expecting: 'and', 'do', 'or', 'then', '-', '+', '#', '=', '<', '>', '<=', '>='",
			"expecting: 'else', 'if', 'return', 'while', identifier, string literal, '{', '}', ';'",
			"expecting: '-', '+', ';'",
			"expecting: 'do', 'or'",
			"expecting: identifier, integers, char const, string literal, '-', '+', '(', ')', ','",
			"expecting: 'else'",
			"expecting: 'fun', 'var', ')', '[', '{', ',', ';'",
			"expecting: ')', '[', ',', ';'",
			"expecting: '-', '+', ')'",
			"expecting: ')', ','",
			"expecting: '-', '+', ')', ','",
			"expecting: '-', '+', ']'",
			"expecting: ')', ',', ';'",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: integers, ']'",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 1, 5, 3, 6, 3, 3, 7, 3, 3, 8, 9, 10, 11, 12, 11, 13, 14, 15, 5, 5, 5, 5, 16, 17, 5, 5, 18, 5, 5, 3, 3, 7, 1, 9, 19, 1, 20, 11, 21, 21, 22, 22, 22, 23, 21, 24, 25, 25, 26, 27, 28, 21, 21, 22, 29, 30, 31, 32, 22, 22, 5, 11, 29, 29, 5, 29, 17, 33, 18, 5, 33, 33, 29, 15, 5, 9, 8, 20, 10, 10, 34, 34, 35, 17, 25, 36, 11, 18, 11, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 21, 29, 18, 37, 38, 39, 30, 31, 29, 33, 18, 8, 20, 19, 40, 41, 42, 35, 35, 3, 21, 25, 25, 27, 27, 28, 28, 28, 28, 21, 21, 21, 21, 21, 5, 21, 22, 14, 29, 18, 18, 5, 19, 40, 8, 8, 6, 6, 6, 43, 35, 35, 38, 33, 33, 8, 8, 19, 19, 35, 19, 19, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
