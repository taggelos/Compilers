/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgram node1 = (PProgram) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgram */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAfundef1fundef1FunDef */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AAfundef1fundef2FunDef */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AHeader1Header */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list);
            }
            break;
            case 4: /* reduce AAfpardef1fpardef1FparDef */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list);
            }
            break;
            case 5: /* reduce AAfpardef1fpardef2FparDef */
            {
                ArrayList<Object> list = new5();
                push(goTo(3), list);
            }
            break;
            case 6: /* reduce AAfpardef2fpardef1FparDef */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AAfpardef2fpardef2FparDef */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AAfpardef3fpardef1FparDef */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AAfpardef3fpardef2FparDef */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce AFparDef4FparDef */
            {
                ArrayList<Object> list = new10();
                push(goTo(3), list);
            }
            break;
            case 11: /* reduce AFparDef5FparDef */
            {
                ArrayList<Object> list = new11();
                push(goTo(3), list);
            }
            break;
            case 12: /* reduce ADataTypes1DataTypes */
            {
                ArrayList<Object> list = new12();
                push(goTo(4), list);
            }
            break;
            case 13: /* reduce ADataTypes2DataTypes */
            {
                ArrayList<Object> list = new13();
                push(goTo(4), list);
            }
            break;
            case 14: /* reduce AAarraytypes1arraytypes1ArrayTypes */
            {
                ArrayList<Object> list = new14();
                push(goTo(5), list);
            }
            break;
            case 15: /* reduce AAarraytypes1arraytypes2ArrayTypes */
            {
                ArrayList<Object> list = new15();
                push(goTo(5), list);
            }
            break;
            case 16: /* reduce ATypes1Types */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce ATypes2Types */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce AReturnType1ReturnType */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce AReturnType2ReturnType */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce ALocalDef1LocalDef */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce ALocalDef2LocalDef */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce ALocalDef3LocalDef */
            {
                ArrayList<Object> list = new22();
                push(goTo(8), list);
            }
            break;
            case 23: /* reduce AFunDecFunDec */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list);
            }
            break;
            case 24: /* reduce AAblockblock1Block */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce AAblockblock2Block */
            {
                ArrayList<Object> list = new25();
                push(goTo(10), list);
            }
            break;
            case 26: /* reduce AStmt1Stmt */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list);
            }
            break;
            case 27: /* reduce AStmt2$LVal11Stmt */
            {
                ArrayList<Object> list = new27();
                push(goTo(11), list);
            }
            break;
            case 28: /* reduce AStmt2$LVal21Stmt */
            {
                ArrayList<Object> list = new28();
                push(goTo(11), list);
            }
            break;
            case 29: /* reduce AStmt2$LVal31Stmt */
            {
                ArrayList<Object> list = new29();
                push(goTo(11), list);
            }
            break;
            case 30: /* reduce AStmt3Stmt */
            {
                ArrayList<Object> list = new30();
                push(goTo(11), list);
            }
            break;
            case 31: /* reduce AStmt4Stmt */
            {
                ArrayList<Object> list = new31();
                push(goTo(11), list);
            }
            break;
            case 32: /* reduce AIfstmtStmt */
            {
                ArrayList<Object> list = new32();
                push(goTo(11), list);
            }
            break;
            case 33: /* reduce AWhilestmtStmt */
            {
                ArrayList<Object> list = new33();
                push(goTo(11), list);
            }
            break;
            case 34: /* reduce AReturnstmtStmt */
            {
                ArrayList<Object> list = new34();
                push(goTo(11), list);
            }
            break;
            case 35: /* reduce AAssignment */
            {
                ArrayList<Object> list = new35();
                push(goTo(12), list);
            }
            break;
            case 36: /* reduce AFunCal1FunCal */
            {
                ArrayList<Object> list = new36();
                push(goTo(13), list);
            }
            break;
            case 37: /* reduce AExprList1ExprList */
            {
                ArrayList<Object> list = new37();
                push(goTo(14), list);
            }
            break;
            case 38: /* reduce AExprList2ExprList */
            {
                ArrayList<Object> list = new38();
                push(goTo(14), list);
            }
            break;
            case 39: /* reduce AExprList3ExprList */
            {
                ArrayList<Object> list = new39();
                push(goTo(14), list);
            }
            break;
            case 40: /* reduce AVarDef1VarDef */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list);
            }
            break;
            case 41: /* reduce AVarIds1VarIds */
            {
                ArrayList<Object> list = new41();
                push(goTo(16), list);
            }
            break;
            case 42: /* reduce AVarIds2VarIds */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list);
            }
            break;
            case 43: /* reduce AWhilestmt */
            {
                ArrayList<Object> list = new43();
                push(goTo(17), list);
            }
            break;
            case 44: /* reduce AWhileWithElse */
            {
                ArrayList<Object> list = new44();
                push(goTo(18), list);
            }
            break;
            case 45: /* reduce AIfstmt */
            {
                ArrayList<Object> list = new45();
                push(goTo(19), list);
            }
            break;
            case 46: /* reduce AIfHeader */
            {
                ArrayList<Object> list = new46();
                push(goTo(20), list);
            }
            break;
            case 47: /* reduce ANoElseIfTrail */
            {
                ArrayList<Object> list = new47();
                push(goTo(21), list);
            }
            break;
            case 48: /* reduce AWithElseIfTrail */
            {
                ArrayList<Object> list = new48();
                push(goTo(21), list);
            }
            break;
            case 49: /* reduce ASemiStmtWithElse */
            {
                ArrayList<Object> list = new49();
                push(goTo(22), list);
            }
            break;
            case 50: /* reduce AAssignmentStmtWithElse */
            {
                ArrayList<Object> list = new50();
                push(goTo(22), list);
            }
            break;
            case 51: /* reduce AStmtReturnstmtStmtWithElse */
            {
                ArrayList<Object> list = new51();
                push(goTo(22), list);
            }
            break;
            case 52: /* reduce AStmtFuncalStmtWithElse */
            {
                ArrayList<Object> list = new52();
                push(goTo(22), list);
            }
            break;
            case 53: /* reduce ABlockStmtWithElse */
            {
                ArrayList<Object> list = new53();
                push(goTo(22), list);
            }
            break;
            case 54: /* reduce AIfStmtWithElse */
            {
                ArrayList<Object> list = new54();
                push(goTo(22), list);
            }
            break;
            case 55: /* reduce AWhileStmtWithElse */
            {
                ArrayList<Object> list = new55();
                push(goTo(22), list);
            }
            break;
            case 56: /* reduce AIfElse */
            {
                ArrayList<Object> list = new56();
                push(goTo(23), list);
            }
            break;
            case 57: /* reduce ACond */
            {
                ArrayList<Object> list = new57();
                push(goTo(24), list);
            }
            break;
            case 58: /* reduce AReturnstmt1Returnstmt */
            {
                ArrayList<Object> list = new58();
                push(goTo(25), list);
            }
            break;
            case 59: /* reduce AReturnstmt2Returnstmt */
            {
                ArrayList<Object> list = new59();
                push(goTo(25), list);
            }
            break;
            case 60: /* reduce AExpr1Expr */
            {
                ArrayList<Object> list = new60();
                push(goTo(26), list);
            }
            break;
            case 61: /* reduce AExpr2Expr */
            {
                ArrayList<Object> list = new61();
                push(goTo(26), list);
            }
            break;
            case 62: /* reduce AExpr3Expr */
            {
                ArrayList<Object> list = new62();
                push(goTo(26), list);
            }
            break;
            case 63: /* reduce AExpr4$LVal11Expr */
            {
                ArrayList<Object> list = new63();
                push(goTo(26), list);
            }
            break;
            case 64: /* reduce AExpr4$LVal21Expr */
            {
                ArrayList<Object> list = new64();
                push(goTo(26), list);
            }
            break;
            case 65: /* reduce AExpr4$LVal31Expr */
            {
                ArrayList<Object> list = new65();
                push(goTo(26), list);
            }
            break;
            case 66: /* reduce AExpr5Expr */
            {
                ArrayList<Object> list = new66();
                push(goTo(26), list);
            }
            break;
            case 67: /* reduce AFactor1Factor */
            {
                ArrayList<Object> list = new67();
                push(goTo(27), list);
            }
            break;
            case 68: /* reduce AFactor2Factor */
            {
                ArrayList<Object> list = new68();
                push(goTo(27), list);
            }
            break;
            case 69: /* reduce AFactor3Factor */
            {
                ArrayList<Object> list = new69();
                push(goTo(27), list);
            }
            break;
            case 70: /* reduce AFactor4Factor */
            {
                ArrayList<Object> list = new70();
                push(goTo(27), list);
            }
            break;
            case 71: /* reduce ATerm1Term */
            {
                ArrayList<Object> list = new71();
                push(goTo(28), list);
            }
            break;
            case 72: /* reduce ATerm2Term */
            {
                ArrayList<Object> list = new72();
                push(goTo(28), list);
            }
            break;
            case 73: /* reduce ATerminal$LocalDef */
            {
                ArrayList<Object> list = new73();
                push(goTo(29), list);
            }
            break;
            case 74: /* reduce ANonTerminal$LocalDef */
            {
                ArrayList<Object> list = new74();
                push(goTo(29), list);
            }
            break;
            case 75: /* reduce ATerminal$ArrayTypes */
            {
                ArrayList<Object> list = new75();
                push(goTo(30), list);
            }
            break;
            case 76: /* reduce ANonTerminal$ArrayTypes */
            {
                ArrayList<Object> list = new76();
                push(goTo(30), list);
            }
            break;
            case 77: /* reduce ATerminal$Stmt */
            {
                ArrayList<Object> list = new77();
                push(goTo(31), list);
            }
            break;
            case 78: /* reduce ANonTerminal$Stmt */
            {
                ArrayList<Object> list = new78();
                push(goTo(31), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgram */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgram pprogramNode1;
        {
            // Block
        PFunDef pfundefNode2;
        pfundefNode2 = (PFunDef)nodeArrayList1.get(0);

        pprogramNode1 = new AProgram(pfundefNode2);
        }
	nodeList.add(pprogramNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAfundef1fundef1FunDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunDef pfundefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PBlock pblockNode4;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        }
        pblockNode4 = (PBlock)nodeArrayList2.get(0);

        pfundefNode1 = new AFunDef1FunDef(pheaderNode2, listNode3, pblockNode4);
        }
	nodeList.add(pfundefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAfundef1fundef2FunDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunDef pfundefNode1;
        {
            // Block
        PHeader pheaderNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PBlock pblockNode5;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        pblockNode5 = (PBlock)nodeArrayList3.get(0);

        pfundefNode1 = new AFunDef1FunDef(pheaderNode2, listNode4, pblockNode5);
        }
	nodeList.add(pfundefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AHeader1Header */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PHeader pheaderNode1;
        {
            // Block
        TFun tfunNode2;
        TIdentifier tidentifierNode3;
        TLPar tlparNode4;
        PFparDef pfpardefNode5;
        TRPar trparNode6;
        TColon tcolonNode7;
        PReturnType preturntypeNode8;
        tfunNode2 = (TFun)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tlparNode4 = (TLPar)nodeArrayList3.get(0);
        pfpardefNode5 = (PFparDef)nodeArrayList4.get(0);
        trparNode6 = (TRPar)nodeArrayList5.get(0);
        tcolonNode7 = (TColon)nodeArrayList6.get(0);
        preturntypeNode8 = (PReturnType)nodeArrayList7.get(0);

        pheaderNode1 = new AHeader1Header(tfunNode2, tidentifierNode3, tlparNode4, pfpardefNode5, trparNode6, tcolonNode7, preturntypeNode8);
        }
	nodeList.add(pheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAfpardef1fpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        TColon tcolonNode4;
        PTypes ptypesNode5;
        PFparDef pfpardefNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        ptypesNode5 = (PTypes)nodeArrayList3.get(0);
        pfpardefNode6 = (PFparDef)nodeArrayList4.get(0);

        pfpardefNode1 = new AFparDef1FparDef(null, tidentifierNode3, tcolonNode4, ptypesNode5, pfpardefNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAfpardef1fpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TIdentifier tidentifierNode3;
        TColon tcolonNode4;
        PTypes ptypesNode5;
        PFparDef pfpardefNode6;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypesNode5 = (PTypes)nodeArrayList4.get(0);
        pfpardefNode6 = (PFparDef)nodeArrayList5.get(0);

        pfpardefNode1 = new AFparDef1FparDef(trefNode2, tidentifierNode3, tcolonNode4, ptypesNode5, pfpardefNode6);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAfpardef2fpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        TComma tcommaNode4;
        PFparDef pfpardefNode5;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tcommaNode4 = (TComma)nodeArrayList2.get(0);
        pfpardefNode5 = (PFparDef)nodeArrayList3.get(0);

        pfpardefNode1 = new AFparDef2FparDef(null, tidentifierNode3, tcommaNode4, pfpardefNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAfpardef2fpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TIdentifier tidentifierNode3;
        TComma tcommaNode4;
        PFparDef pfpardefNode5;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tcommaNode4 = (TComma)nodeArrayList3.get(0);
        pfpardefNode5 = (PFparDef)nodeArrayList4.get(0);

        pfpardefNode1 = new AFparDef2FparDef(trefNode2, tidentifierNode3, tcommaNode4, pfpardefNode5);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAfpardef3fpardef1FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        @SuppressWarnings("unused") Object nullNode2 = null;
        TIdentifier tidentifierNode3;
        TColon tcolonNode4;
        PTypes ptypesNode5;
        TComma tcommaNode6;
        PFparDef pfpardefNode7;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tcolonNode4 = (TColon)nodeArrayList2.get(0);
        ptypesNode5 = (PTypes)nodeArrayList3.get(0);
        tcommaNode6 = (TComma)nodeArrayList4.get(0);
        pfpardefNode7 = (PFparDef)nodeArrayList5.get(0);

        pfpardefNode1 = new AFparDef3FparDef(null, tidentifierNode3, tcolonNode4, ptypesNode5, tcommaNode6, pfpardefNode7);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAfpardef3fpardef2FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TRef trefNode2;
        TIdentifier tidentifierNode3;
        TColon tcolonNode4;
        PTypes ptypesNode5;
        TComma tcommaNode6;
        PFparDef pfpardefNode7;
        trefNode2 = (TRef)nodeArrayList1.get(0);
        tidentifierNode3 = (TIdentifier)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypesNode5 = (PTypes)nodeArrayList4.get(0);
        tcommaNode6 = (TComma)nodeArrayList5.get(0);
        pfpardefNode7 = (PFparDef)nodeArrayList6.get(0);

        pfpardefNode1 = new AFparDef3FparDef(trefNode2, tidentifierNode3, tcolonNode4, ptypesNode5, tcommaNode6, pfpardefNode7);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AFparDef4FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFparDef pfpardefNode1;
        {
            // Block
        TSemi tsemiNode2;
        PFparDef pfpardefNode3;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);
        pfpardefNode3 = (PFparDef)nodeArrayList2.get(0);

        pfpardefNode1 = new AFparDef4FparDef(tsemiNode2, pfpardefNode3);
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AFparDef5FparDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFparDef pfpardefNode1;
        {
            // Block

        pfpardefNode1 = new AFparDef5FparDef();
        }
	nodeList.add(pfpardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ADataTypes1DataTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataTypes pdatatypesNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pdatatypesNode1 = new ADataTypes1DataTypes(tintNode2);
        }
	nodeList.add(pdatatypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ADataTypes2DataTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDataTypes pdatatypesNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pdatatypesNode1 = new ADataTypes2DataTypes(tcharNode2);
        }
	nodeList.add(pdatatypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AAarraytypes1arraytypes1ArrayTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayTypes parraytypesNode1;
        {
            // Block
        TLBr tlbrNode2;
        @SuppressWarnings("unused") Object nullNode3 = null;
        TRBr trbrNode4;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        trbrNode4 = (TRBr)nodeArrayList2.get(0);

        parraytypesNode1 = new AArrayTypes1ArrayTypes(tlbrNode2, null, trbrNode4);
        }
	nodeList.add(parraytypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAarraytypes1arraytypes2ArrayTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArrayTypes parraytypesNode1;
        {
            // Block
        TLBr tlbrNode2;
        TIntegers tintegersNode3;
        TRBr trbrNode4;
        tlbrNode2 = (TLBr)nodeArrayList1.get(0);
        tintegersNode3 = (TIntegers)nodeArrayList2.get(0);
        trbrNode4 = (TRBr)nodeArrayList3.get(0);

        parraytypesNode1 = new AArrayTypes1ArrayTypes(tlbrNode2, tintegersNode3, trbrNode4);
        }
	nodeList.add(parraytypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ATypes1Types */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypes ptypesNode1;
        {
            // Block
        PDataTypes pdatatypesNode2;
        pdatatypesNode2 = (PDataTypes)nodeArrayList1.get(0);

        ptypesNode1 = new ATypes1Types(pdatatypesNode2);
        }
	nodeList.add(ptypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce ATypes2Types */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTypes ptypesNode1;
        {
            // Block
        PDataTypes pdatatypesNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pdatatypesNode2 = (PDataTypes)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        ptypesNode1 = new ATypes2Types(pdatatypesNode2, listNode4);
        }
	nodeList.add(ptypesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AReturnType1ReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block
        PDataTypes pdatatypesNode2;
        pdatatypesNode2 = (PDataTypes)nodeArrayList1.get(0);

        preturntypeNode1 = new AReturnType1ReturnType(pdatatypesNode2);
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AReturnType2ReturnType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnType preturntypeNode1;
        {
            // Block
        TNothing tnothingNode2;
        tnothingNode2 = (TNothing)nodeArrayList1.get(0);

        preturntypeNode1 = new AReturnType2ReturnType(tnothingNode2);
        }
	nodeList.add(preturntypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ALocalDef1LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFunDef pfundefNode2;
        pfundefNode2 = (PFunDef)nodeArrayList1.get(0);

        plocaldefNode1 = new ALocalDef1LocalDef(pfundefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ALocalDef2LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PFunDec pfundecNode2;
        pfundecNode2 = (PFunDec)nodeArrayList1.get(0);

        plocaldefNode1 = new ALocalDef2LocalDef(pfundecNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ALocalDef3LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLocalDef plocaldefNode1;
        {
            // Block
        PVarDef pvardefNode2;
        pvardefNode2 = (PVarDef)nodeArrayList1.get(0);

        plocaldefNode1 = new ALocalDef3LocalDef(pvardefNode2);
        }
	nodeList.add(plocaldefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AFunDecFunDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunDec pfundecNode1;
        {
            // Block
        PHeader pheaderNode2;
        TSemi tsemiNode3;
        pheaderNode2 = (PHeader)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pfundecNode1 = new AFunDecFunDec(pheaderNode2, tsemiNode3);
        }
	nodeList.add(pfundecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AAblockblock1Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLAg tlagNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        TRAg tragNode4;
        tlagNode2 = (TLAg)nodeArrayList1.get(0);
        {
            // Block
        }
        tragNode4 = (TRAg)nodeArrayList2.get(0);

        pblockNode1 = new ABlockBlock(tlagNode2, listNode3, tragNode4);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AAblockblock2Block */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBlock pblockNode1;
        {
            // Block
        TLAg tlagNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        TRAg tragNode5;
        tlagNode2 = (TLAg)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }
        tragNode5 = (TRAg)nodeArrayList3.get(0);

        pblockNode1 = new ABlockBlock(tlagNode2, listNode4, tragNode5);
        }
	nodeList.add(pblockNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AStmt1Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        TSemi tsemiNode2;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);

        pstmtNode1 = new AStmt1Stmt(tsemiNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AStmt2$LVal11Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLVal plvalNode2;
        TArrow tarrowNode4;
        PExpr pexprNode5;
        TSemi tsemiNode6;
        {
            // Block
        TIdentifier tidentifierNode3;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);

        plvalNode2 = new ALVal1LVal(tidentifierNode3);
        }
        tarrowNode4 = (TArrow)nodeArrayList2.get(0);
        pexprNode5 = (PExpr)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);

        pstmtNode1 = new AStmt2Stmt(plvalNode2, tarrowNode4, pexprNode5, tsemiNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AStmt2$LVal21Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLVal plvalNode2;
        TArrow tarrowNode4;
        PExpr pexprNode5;
        TSemi tsemiNode6;
        {
            // Block
        TStringLiteral tstringliteralNode3;
        tstringliteralNode3 = (TStringLiteral)nodeArrayList1.get(0);

        plvalNode2 = new ALVal2LVal(tstringliteralNode3);
        }
        tarrowNode4 = (TArrow)nodeArrayList2.get(0);
        pexprNode5 = (PExpr)nodeArrayList3.get(0);
        tsemiNode6 = (TSemi)nodeArrayList4.get(0);

        pstmtNode1 = new AStmt2Stmt(plvalNode2, tarrowNode4, pexprNode5, tsemiNode6);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AStmt2$LVal31Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PLVal plvalNode2;
        TArrow tarrowNode7;
        PExpr pexprNode8;
        TSemi tsemiNode9;
        {
            // Block
        TIdentifier tidentifierNode3;
        TLBr tlbrNode4;
        PExpr pexprNode5;
        TRBr trbrNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tlbrNode4 = (TLBr)nodeArrayList2.get(0);
        pexprNode5 = (PExpr)nodeArrayList3.get(0);
        trbrNode6 = (TRBr)nodeArrayList4.get(0);

        plvalNode2 = new ALVal3LVal(tidentifierNode3, tlbrNode4, pexprNode5, trbrNode6);
        }
        tarrowNode7 = (TArrow)nodeArrayList5.get(0);
        pexprNode8 = (PExpr)nodeArrayList6.get(0);
        tsemiNode9 = (TSemi)nodeArrayList7.get(0);

        pstmtNode1 = new AStmt2Stmt(plvalNode2, tarrowNode7, pexprNode8, tsemiNode9);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce AStmt3Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstmtNode1 = new AStmt3Stmt(pblockNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AStmt4Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PFunCal pfuncalNode2;
        TSemi tsemiNode3;
        pfuncalNode2 = (PFunCal)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pstmtNode1 = new AStmt4Stmt(pfuncalNode2, tsemiNode3);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AIfstmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PIfstmt pifstmtNode2;
        pifstmtNode2 = (PIfstmt)nodeArrayList1.get(0);

        pstmtNode1 = new AIfstmtStmt(pifstmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AWhilestmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PWhilestmt pwhilestmtNode2;
        pwhilestmtNode2 = (PWhilestmt)nodeArrayList1.get(0);

        pstmtNode1 = new AWhilestmtStmt(pwhilestmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AReturnstmtStmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmt pstmtNode1;
        {
            // Block
        PReturnstmt preturnstmtNode2;
        preturnstmtNode2 = (PReturnstmt)nodeArrayList1.get(0);

        pstmtNode1 = new AReturnstmtStmt(preturnstmtNode2);
        }
	nodeList.add(pstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AAssignment */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignment passignmentNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TArrow tarrowNode3;
        PExpr pexprNode4;
        TSemi tsemiNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tarrowNode3 = (TArrow)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tsemiNode5 = (TSemi)nodeArrayList4.get(0);

        passignmentNode1 = new AAssignment(tidentifierNode2, tarrowNode3, pexprNode4, tsemiNode5);
        }
	nodeList.add(passignmentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AFunCal1FunCal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunCal pfuncalNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TLPar tlparNode3;
        PExprList pexprlistNode4;
        TRPar trparNode5;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tlparNode3 = (TLPar)nodeArrayList2.get(0);
        pexprlistNode4 = (PExprList)nodeArrayList3.get(0);
        trparNode5 = (TRPar)nodeArrayList4.get(0);

        pfuncalNode1 = new AFunCal1FunCal(tidentifierNode2, tlparNode3, pexprlistNode4, trparNode5);
        }
	nodeList.add(pfuncalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AExprList1ExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprList pexprlistNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        pexprlistNode1 = new AExprList1ExprList(pexprNode2);
        }
	nodeList.add(pexprlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AExprList2ExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprList pexprlistNode1;
        {
            // Block
        PExpr pexprNode2;
        TComma tcommaNode3;
        PExprList pexprlistNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pexprlistNode4 = (PExprList)nodeArrayList3.get(0);

        pexprlistNode1 = new AExprList2ExprList(pexprNode2, tcommaNode3, pexprlistNode4);
        }
	nodeList.add(pexprlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AExprList3ExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PExprList pexprlistNode1;
        {
            // Block

        pexprlistNode1 = new AExprList3ExprList();
        }
	nodeList.add(pexprlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AVarDef1VarDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDef pvardefNode1;
        {
            // Block
        TVar tvarNode2;
        PVarIds pvaridsNode3;
        TColon tcolonNode4;
        PTypes ptypesNode5;
        TSemi tsemiNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        pvaridsNode3 = (PVarIds)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        ptypesNode5 = (PTypes)nodeArrayList4.get(0);
        tsemiNode6 = (TSemi)nodeArrayList5.get(0);

        pvardefNode1 = new AVarDef1VarDef(tvarNode2, pvaridsNode3, tcolonNode4, ptypesNode5, tsemiNode6);
        }
	nodeList.add(pvardefNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce AVarIds1VarIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarIds pvaridsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvaridsNode1 = new AVarIds1VarIds(tidentifierNode2);
        }
	nodeList.add(pvaridsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AVarIds2VarIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarIds pvaridsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TComma tcommaNode3;
        PVarIds pvaridsNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pvaridsNode4 = (PVarIds)nodeArrayList3.get(0);

        pvaridsNode1 = new AVarIds2VarIds(tidentifierNode2, tcommaNode3, pvaridsNode4);
        }
	nodeList.add(pvaridsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AWhilestmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhilestmt pwhilestmtNode1;
        {
            // Block
        TWhile twhileNode2;
        PCond pcondNode3;
        TDo tdoNode4;
        PStmt pstmtNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pstmtNode5 = (PStmt)nodeArrayList4.get(0);

        pwhilestmtNode1 = new AWhilestmt(twhileNode2, pcondNode3, tdoNode4, pstmtNode5);
        }
	nodeList.add(pwhilestmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AWhileWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PWhileWithElse pwhilewithelseNode1;
        {
            // Block
        TWhile twhileNode2;
        PCond pcondNode3;
        TDo tdoNode4;
        PStmtWithElse pstmtwithelseNode5;
        twhileNode2 = (TWhile)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tdoNode4 = (TDo)nodeArrayList3.get(0);
        pstmtwithelseNode5 = (PStmtWithElse)nodeArrayList4.get(0);

        pwhilewithelseNode1 = new AWhileWithElse(twhileNode2, pcondNode3, tdoNode4, pstmtwithelseNode5);
        }
	nodeList.add(pwhilewithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AIfstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfstmt pifstmtNode1;
        {
            // Block
        PIfHeader pifheaderNode2;
        PIfTrail piftrailNode3;
        pifheaderNode2 = (PIfHeader)nodeArrayList1.get(0);
        piftrailNode3 = (PIfTrail)nodeArrayList2.get(0);

        pifstmtNode1 = new AIfstmt(pifheaderNode2, piftrailNode3);
        }
	nodeList.add(pifstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AIfHeader */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfHeader pifheaderNode1;
        {
            // Block
        TIf tifNode2;
        PCond pcondNode3;
        TThen tthenNode4;
        tifNode2 = (TIf)nodeArrayList1.get(0);
        pcondNode3 = (PCond)nodeArrayList2.get(0);
        tthenNode4 = (TThen)nodeArrayList3.get(0);

        pifheaderNode1 = new AIfHeader(tifNode2, pcondNode3, tthenNode4);
        }
	nodeList.add(pifheaderNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ANoElseIfTrail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfTrail piftrailNode1;
        {
            // Block
        PStmt pstmtNode2;
        pstmtNode2 = (PStmt)nodeArrayList1.get(0);

        piftrailNode1 = new ANoElseIfTrail(pstmtNode2);
        }
	nodeList.add(piftrailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AWithElseIfTrail */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfTrail piftrailNode1;
        {
            // Block
        PStmtWithElse pstmtwithelseNode2;
        TElse telseNode3;
        PStmt pstmtNode4;
        pstmtwithelseNode2 = (PStmtWithElse)nodeArrayList1.get(0);
        telseNode3 = (TElse)nodeArrayList2.get(0);
        pstmtNode4 = (PStmt)nodeArrayList3.get(0);

        piftrailNode1 = new AWithElseIfTrail(pstmtwithelseNode2, telseNode3, pstmtNode4);
        }
	nodeList.add(piftrailNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ASemiStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        TSemi tsemiNode2;
        tsemiNode2 = (TSemi)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new ASemiStmtWithElse(tsemiNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce AAssignmentStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PAssignment passignmentNode2;
        passignmentNode2 = (PAssignment)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new AAssignmentStmtWithElse(passignmentNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AStmtReturnstmtStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PReturnstmt preturnstmtNode2;
        preturnstmtNode2 = (PReturnstmt)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new AStmtReturnstmtStmtWithElse(preturnstmtNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AStmtFuncalStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PFunCal pfuncalNode2;
        TSemi tsemiNode3;
        pfuncalNode2 = (PFunCal)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        pstmtwithelseNode1 = new AStmtFuncalStmtWithElse(pfuncalNode2, tsemiNode3);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ABlockStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PBlock pblockNode2;
        pblockNode2 = (PBlock)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new ABlockStmtWithElse(pblockNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AIfStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PIfElse pifelseNode2;
        pifelseNode2 = (PIfElse)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new AIfStmtWithElse(pifelseNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AWhileStmtWithElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStmtWithElse pstmtwithelseNode1;
        {
            // Block
        PWhileWithElse pwhilewithelseNode2;
        pwhilewithelseNode2 = (PWhileWithElse)nodeArrayList1.get(0);

        pstmtwithelseNode1 = new AWhileStmtWithElse(pwhilewithelseNode2);
        }
	nodeList.add(pstmtwithelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AIfElse */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIfElse pifelseNode1;
        {
            // Block
        PIfHeader pifheaderNode2;
        PStmtWithElse pstmtwithelseNode3;
        TElse telseNode4;
        PStmtWithElse pstmtwithelseNode5;
        pifheaderNode2 = (PIfHeader)nodeArrayList1.get(0);
        pstmtwithelseNode3 = (PStmtWithElse)nodeArrayList2.get(0);
        telseNode4 = (TElse)nodeArrayList3.get(0);
        pstmtwithelseNode5 = (PStmtWithElse)nodeArrayList4.get(0);

        pifelseNode1 = new AIfElse(pifheaderNode2, pstmtwithelseNode3, telseNode4, pstmtwithelseNode5);
        }
	nodeList.add(pifelseNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ACond */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCond pcondNode1;
        {
            // Block
        TIntegers tintegersNode2;
        tintegersNode2 = (TIntegers)nodeArrayList1.get(0);

        pcondNode1 = new ACond(tintegersNode2);
        }
	nodeList.add(pcondNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AReturnstmt1Returnstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnstmt preturnstmtNode1;
        {
            // Block
        TReturn treturnNode2;
        TSemi tsemiNode3;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        tsemiNode3 = (TSemi)nodeArrayList2.get(0);

        preturnstmtNode1 = new AReturnstmt1Returnstmt(treturnNode2, tsemiNode3);
        }
	nodeList.add(preturnstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AReturnstmt2Returnstmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PReturnstmt preturnstmtNode1;
        {
            // Block
        TReturn treturnNode2;
        PExpr pexprNode3;
        TSemi tsemiNode4;
        treturnNode2 = (TReturn)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tsemiNode4 = (TSemi)nodeArrayList3.get(0);

        preturnstmtNode1 = new AReturnstmt2Returnstmt(treturnNode2, pexprNode3, tsemiNode4);
        }
	nodeList.add(preturnstmtNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AExpr1Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pexprNode1 = new AExpr1Expr(pfactorNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce AExpr2Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new AExpr2Expr(pexprNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce AExpr3Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMinus tminusNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new AExpr3Expr(pexprNode2, tminusNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce AExpr4$LVal11Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PLVal plvalNode2;
        {
            // Block
        TIdentifier tidentifierNode3;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);

        plvalNode2 = new ALVal1LVal(tidentifierNode3);
        }

        pexprNode1 = new AExpr4Expr(plvalNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce AExpr4$LVal21Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PLVal plvalNode2;
        {
            // Block
        TStringLiteral tstringliteralNode3;
        tstringliteralNode3 = (TStringLiteral)nodeArrayList1.get(0);

        plvalNode2 = new ALVal2LVal(tstringliteralNode3);
        }

        pexprNode1 = new AExpr4Expr(plvalNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce AExpr4$LVal31Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PLVal plvalNode2;
        {
            // Block
        TIdentifier tidentifierNode3;
        TLBr tlbrNode4;
        PExpr pexprNode5;
        TRBr trbrNode6;
        tidentifierNode3 = (TIdentifier)nodeArrayList1.get(0);
        tlbrNode4 = (TLBr)nodeArrayList2.get(0);
        pexprNode5 = (PExpr)nodeArrayList3.get(0);
        trbrNode6 = (TRBr)nodeArrayList4.get(0);

        plvalNode2 = new ALVal3LVal(tidentifierNode3, tlbrNode4, pexprNode5, trbrNode6);
        }

        pexprNode1 = new AExpr4Expr(plvalNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce AExpr5Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFunCal pfuncalNode2;
        pfuncalNode2 = (PFunCal)nodeArrayList1.get(0);

        pexprNode1 = new AExpr5Expr(pfuncalNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce AFactor1Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pfactorNode1 = new AFactor1Factor(ptermNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce AFactor2Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TStar tstarNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AFactor2Factor(pfactorNode2, tstarNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce AFactor3Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TSlash tslashNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tslashNode3 = (TSlash)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AFactor3Factor(pfactorNode2, tslashNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce AFactor4Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TMod tmodNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tmodNode3 = (TMod)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AFactor4Factor(pfactorNode2, tmodNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATerm1Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIntegers tintegersNode2;
        tintegersNode2 = (TIntegers)nodeArrayList1.get(0);

        ptermNode1 = new ATerm1Term(tintegersNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ATerm2Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TCharConst tcharconstNode2;
        tcharconstNode2 = (TCharConst)nodeArrayList1.get(0);

        ptermNode1 = new ATerm2Term(tcharconstNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new73() /* reduce ATerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLocalDef plocaldefNode1;
        plocaldefNode1 = (PLocalDef)nodeArrayList1.get(0);
	if(plocaldefNode1 != null)
	{
	  listNode2.add(plocaldefNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new74() /* reduce ANonTerminal$LocalDef */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLocalDef plocaldefNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plocaldefNode2 = (PLocalDef)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plocaldefNode2 != null)
	{
	  listNode3.add(plocaldefNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new75() /* reduce ATerminal$ArrayTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PArrayTypes parraytypesNode1;
        parraytypesNode1 = (PArrayTypes)nodeArrayList1.get(0);
	if(parraytypesNode1 != null)
	{
	  listNode2.add(parraytypesNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new76() /* reduce ANonTerminal$ArrayTypes */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PArrayTypes parraytypesNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        parraytypesNode2 = (PArrayTypes)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(parraytypesNode2 != null)
	{
	  listNode3.add(parraytypesNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new77() /* reduce ATerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PStmt pstmtNode1;
        pstmtNode1 = (PStmt)nodeArrayList1.get(0);
	if(pstmtNode1 != null)
	{
	  listNode2.add(pstmtNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new78() /* reduce ANonTerminal$Stmt */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PStmt pstmtNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pstmtNode2 = (PStmt)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pstmtNode2 != null)
	{
	  listNode3.add(pstmtNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {6, SHIFT, 1}, },
			{{-1, ERROR, 1}, {21, SHIFT, 5}, },
			{{-1, ERROR, 2}, {43, ACCEPT, -1}, },
			{{-1, REDUCE, 0}, },
			{{-1, ERROR, 4}, {6, SHIFT, 1}, {16, SHIFT, 6}, {37, SHIFT, 7}, },
			{{-1, ERROR, 5}, {33, SHIFT, 15}, },
			{{-1, ERROR, 6}, {21, SHIFT, 16}, },
			{{-1, ERROR, 7}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 20}, {19, SHIFT, 21}, {21, SHIFT, 22}, {37, SHIFT, 7}, {38, SHIFT, 23}, {40, SHIFT, 24}, },
			{{-1, REDUCE, 20}, },
			{{-1, ERROR, 9}, {6, SHIFT, 1}, {16, SHIFT, 6}, {37, SHIFT, 7}, {40, SHIFT, 33}, },
			{{-1, REDUCE, 73}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 1}, },
			{{-1, REDUCE, 22}, },
			{{-1, ERROR, 14}, {6, SHIFT, 1}, {16, SHIFT, 6}, {37, SHIFT, 7}, },
			{{-1, REDUCE, 11}, {13, SHIFT, 36}, {21, SHIFT, 37}, {40, SHIFT, 38}, },
			{{-1, REDUCE, 41}, {39, SHIFT, 40}, },
			{{-1, ERROR, 17}, {41, SHIFT, 41}, },
			{{-1, ERROR, 18}, {18, SHIFT, 42}, },
			{{-1, ERROR, 19}, {18, SHIFT, 44}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 47}, {40, SHIFT, 48}, },
			{{-1, ERROR, 20}, {18, SHIFT, 42}, },
			{{-1, ERROR, 21}, {42, SHIFT, 54}, },
			{{-1, ERROR, 22}, {33, SHIFT, 55}, {35, SHIFT, 56}, {42, SHIFT, 57}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 26}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 77}, },
			{{-1, ERROR, 27}, {40, SHIFT, 58}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 30}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 59}, {19, SHIFT, 21}, {21, SHIFT, 60}, {37, SHIFT, 7}, {40, SHIFT, 61}, },
			{{-1, REDUCE, 34}, },
			{{-1, ERROR, 32}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 20}, {19, SHIFT, 21}, {21, SHIFT, 22}, {37, SHIFT, 7}, {38, SHIFT, 72}, {40, SHIFT, 24}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 74}, },
			{{-1, REDUCE, 2}, },
			{{-1, ERROR, 36}, {21, SHIFT, 74}, },
			{{-1, ERROR, 37}, {39, SHIFT, 75}, {41, SHIFT, 76}, },
			{{-1, REDUCE, 11}, {13, SHIFT, 36}, {21, SHIFT, 37}, {40, SHIFT, 38}, },
			{{-1, ERROR, 39}, {34, SHIFT, 78}, },
			{{-1, ERROR, 40}, {21, SHIFT, 16}, },
			{{-1, ERROR, 41}, {2, SHIFT, 80}, {8, SHIFT, 81}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 43}, {15, SHIFT, 84}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 72}, },
			{{-1, REDUCE, 63}, {33, SHIFT, 55}, {35, SHIFT, 85}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 50}, {22, SHIFT, 86}, {23, SHIFT, 87}, {40, SHIFT, 88}, },
			{{-1, REDUCE, 60}, {9, SHIFT, 89}, {24, SHIFT, 90}, {25, SHIFT, 91}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 53}, {4, SHIFT, 92}, },
			{{-1, ERROR, 54}, {18, SHIFT, 44}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, REDUCE, 39}, {18, SHIFT, 44}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, ERROR, 56}, {18, SHIFT, 44}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, ERROR, 57}, {18, SHIFT, 44}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 59}, {18, SHIFT, 42}, },
			{{-1, ERROR, 60}, {33, SHIFT, 55}, {35, SHIFT, 56}, {42, SHIFT, 99}, },
			{{-1, REDUCE, 26}, {5, REDUCE, 49}, },
			{{-1, REDUCE, 30}, {5, REDUCE, 53}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 65}, {40, SHIFT, 100}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 67}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 59}, {19, SHIFT, 21}, {21, SHIFT, 60}, {37, SHIFT, 7}, {40, SHIFT, 61}, },
			{{-1, REDUCE, 45}, },
			{{-1, ERROR, 69}, {5, SHIFT, 102}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 34}, {5, REDUCE, 51}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 78}, },
			{{-1, ERROR, 74}, {39, SHIFT, 103}, {41, SHIFT, 104}, },
			{{-1, REDUCE, 11}, {13, SHIFT, 36}, {21, SHIFT, 37}, {40, SHIFT, 38}, },
			{{-1, ERROR, 76}, {2, SHIFT, 80}, {8, SHIFT, 81}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 78}, {41, SHIFT, 107}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 16}, {35, SHIFT, 108}, },
			{{-1, ERROR, 83}, {40, SHIFT, 111}, },
			{{-1, REDUCE, 46}, },
			{{-1, ERROR, 85}, {18, SHIFT, 44}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, ERROR, 86}, {18, SHIFT, 44}, {20, SHIFT, 46}, },
			{{-1, ERROR, 87}, {18, SHIFT, 44}, {20, SHIFT, 46}, },
			{{-1, REDUCE, 59}, },
			{{-1, ERROR, 89}, {18, SHIFT, 44}, {20, SHIFT, 46}, },
			{{-1, ERROR, 90}, {18, SHIFT, 44}, {20, SHIFT, 46}, },
			{{-1, ERROR, 91}, {18, SHIFT, 44}, {20, SHIFT, 46}, },
			{{-1, ERROR, 92}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 20}, {19, SHIFT, 21}, {21, SHIFT, 22}, {37, SHIFT, 7}, {40, SHIFT, 24}, },
			{{-1, ERROR, 93}, {22, SHIFT, 86}, {23, SHIFT, 87}, {40, SHIFT, 119}, },
			{{-1, ERROR, 94}, {34, SHIFT, 120}, },
			{{-1, REDUCE, 37}, {22, SHIFT, 86}, {23, SHIFT, 87}, {39, SHIFT, 121}, },
			{{-1, ERROR, 96}, {22, SHIFT, 86}, {23, SHIFT, 87}, {36, SHIFT, 122}, },
			{{-1, ERROR, 97}, {22, SHIFT, 86}, {23, SHIFT, 87}, {40, SHIFT, 123}, },
			{{-1, ERROR, 98}, {4, SHIFT, 124}, },
			{{-1, ERROR, 99}, {18, SHIFT, 44}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, REDUCE, 31}, {5, REDUCE, 52}, },
			{{-1, ERROR, 101}, {5, SHIFT, 126}, },
			{{-1, ERROR, 102}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 20}, {19, SHIFT, 21}, {21, SHIFT, 22}, {37, SHIFT, 7}, {40, SHIFT, 24}, },
			{{-1, REDUCE, 11}, {13, SHIFT, 36}, {21, SHIFT, 37}, {40, SHIFT, 38}, },
			{{-1, ERROR, 104}, {2, SHIFT, 80}, {8, SHIFT, 81}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 11}, {13, SHIFT, 36}, {21, SHIFT, 37}, {39, SHIFT, 130}, {40, SHIFT, 38}, },
			{{-1, ERROR, 107}, {2, SHIFT, 80}, {8, SHIFT, 81}, {11, SHIFT, 132}, },
			{{-1, ERROR, 108}, {18, SHIFT, 135}, {36, SHIFT, 136}, },
			{{-1, REDUCE, 75}, },
			{{-1, REDUCE, 17}, {35, SHIFT, 108}, },
			{{-1, REDUCE, 40}, },
			{{-1, ERROR, 112}, {22, SHIFT, 86}, {23, SHIFT, 87}, {36, SHIFT, 138}, },
			{{-1, REDUCE, 62}, {9, SHIFT, 89}, {24, SHIFT, 90}, {25, SHIFT, 91}, },
			{{-1, REDUCE, 61}, {9, SHIFT, 89}, {24, SHIFT, 90}, {25, SHIFT, 91}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 68}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 28}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 39}, {18, SHIFT, 44}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, ERROR, 122}, {42, SHIFT, 140}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 124}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 59}, {19, SHIFT, 21}, {21, SHIFT, 60}, {37, SHIFT, 7}, {40, SHIFT, 61}, },
			{{-1, ERROR, 125}, {22, SHIFT, 86}, {23, SHIFT, 87}, {40, SHIFT, 142}, },
			{{-1, ERROR, 126}, {7, SHIFT, 18}, {14, SHIFT, 19}, {17, SHIFT, 59}, {19, SHIFT, 21}, {21, SHIFT, 60}, {37, SHIFT, 7}, {40, SHIFT, 61}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 11}, {13, SHIFT, 36}, {21, SHIFT, 37}, {39, SHIFT, 144}, {40, SHIFT, 38}, },
			{{-1, REDUCE, 11}, {13, SHIFT, 36}, {21, SHIFT, 37}, {40, SHIFT, 38}, },
			{{-1, REDUCE, 4}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 3}, },
			{{-1, ERROR, 135}, {36, SHIFT, 147}, },
			{{-1, REDUCE, 14}, },
			{{-1, REDUCE, 76}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 140}, {18, SHIFT, 44}, {19, SHIFT, 45}, {20, SHIFT, 46}, {21, SHIFT, 47}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 27}, {5, REDUCE, 35}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 11}, {13, SHIFT, 36}, {21, SHIFT, 37}, {40, SHIFT, 38}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 15}, },
			{{-1, ERROR, 148}, {22, SHIFT, 86}, {23, SHIFT, 87}, {40, SHIFT, 150}, },
			{{-1, REDUCE, 9}, },
			{{-1, REDUCE, 29}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 8}, {0, 3}, },
			{{-1, 9}, {0, 4}, },
			{{-1, 39}, {38, 77}, {75, 105}, {103, 128}, {106, 131}, {129, 145}, {130, 146}, {144, 149}, },
			{{-1, 82}, {107, 133}, },
			{{-1, 109}, {110, 137}, },
			{{-1, 83}, {76, 106}, {104, 129}, },
			{{-1, 134}, },
			{{-1, 10}, {14, 34}, },
			{{-1, 11}, },
			{{-1, 25}, {4, 12}, {9, 12}, {14, 35}, {30, 62}, {67, 62}, {124, 62}, {126, 62}, },
			{{-1, 63}, {7, 26}, {32, 73}, {92, 118}, {102, 127}, {124, 118}, {126, 127}, },
			{{-1, 64}, },
			{{-1, 49}, {7, 27}, {30, 65}, {32, 27}, {67, 65}, {92, 27}, {102, 27}, {124, 65}, {126, 65}, },
			{{-1, 94}, {121, 139}, },
			{{-1, 13}, },
			{{-1, 17}, {40, 79}, },
			{{-1, 28}, },
			{{-1, 66}, },
			{{-1, 29}, },
			{{-1, 30}, {30, 67}, {67, 67}, {124, 67}, {126, 67}, },
			{{-1, 68}, },
			{{-1, 69}, {67, 101}, {124, 141}, {126, 143}, },
			{{-1, 70}, },
			{{-1, 43}, {20, 53}, {59, 98}, },
			{{-1, 31}, {30, 71}, {67, 71}, {124, 71}, {126, 71}, },
			{{-1, 95}, {19, 50}, {54, 93}, {56, 96}, {57, 97}, {85, 112}, {99, 125}, {140, 148}, },
			{{-1, 51}, {86, 113}, {87, 114}, },
			{{-1, 52}, {89, 115}, {90, 116}, {91, 117}, },
			{{-1, 14}, },
			{{-1, 110}, },
			{{-1, 32}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'fun'",
			"expecting: identifier",
			"expecting: EOF",
			"expecting: 'fun', 'var', '{'",
			"expecting: '('",
			"expecting: 'if', 'return', 'while', string literal, identifier, '{', '}', ';'",
			"expecting: 'fun', 'var', '{', ';'",
			"expecting: 'fun', 'var', '{', EOF",
			"expecting: 'ref', identifier, ')', ';'",
			"expecting: ',', ':'",
			"expecting: ':'",
			"expecting: integers",
			"expecting: integers, string literal, char const, identifier, ';'",
			"expecting: '<-'",
			"expecting: '(', '[', '<-'",
			"expecting: 'else', 'fun', 'if', 'return', 'var', 'while', string literal, identifier, '{', '}', ';', EOF",
			"expecting: ';'",
			"expecting: 'if', 'return', 'while', string literal, identifier, '{', ';'",
			"expecting: ')'",
			"expecting: 'char', 'int'",
			"expecting: 'do', 'then'",
			"expecting: 'then'",
			"expecting: 'mod', '-', '+', '*', '/', ')', ']', ',', ';'",
			"expecting: '-', '+', ')', ']', ',', ';'",
			"expecting: '-', '+', '(', ')', '[', ']', ',', ';'",
			"expecting: 'else', 'if', 'return', 'while', string literal, identifier, '{', '}', ';'",
			"expecting: '-', '+', ';'",
			"expecting: 'do'",
			"expecting: integers, string literal, char const, identifier",
			"expecting: integers, string literal, char const, identifier, ')'",
			"expecting: 'else'",
			"expecting: 'fun', 'ref', 'var', identifier, ')', '[', '{', ',', ';'",
			"expecting: 'ref', identifier, ')', '[', ',', ';'",
			"expecting: integers, char const",
			"expecting: '-', '+', ')', ','",
			"expecting: '-', '+', ']'",
			"expecting: 'ref', identifier, ')', ',', ';'",
			"expecting: 'char', 'int', 'nothing'",
			"expecting: integers, ']'",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 2, 3, 4, 1, 5, 3, 6, 3, 3, 7, 3, 3, 8, 9, 10, 11, 12, 11, 13, 14, 15, 5, 5, 5, 16, 5, 5, 17, 5, 5, 3, 3, 7, 1, 9, 8, 18, 1, 19, 20, 21, 22, 23, 22, 24, 25, 23, 26, 22, 22, 27, 28, 29, 28, 28, 5, 11, 14, 25, 25, 5, 30, 16, 30, 17, 5, 30, 30, 25, 15, 5, 9, 8, 19, 18, 10, 10, 31, 31, 32, 16, 17, 28, 33, 33, 25, 33, 33, 33, 17, 26, 18, 34, 35, 26, 27, 28, 25, 30, 17, 8, 19, 18, 36, 37, 38, 32, 32, 3, 35, 22, 22, 22, 22, 22, 5, 5, 23, 29, 13, 5, 17, 26, 17, 5, 18, 36, 8, 18, 6, 6, 6, 39, 32, 32, 23, 18, 28, 30, 25, 30, 8, 18, 18, 32, 26, 18, 5, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
