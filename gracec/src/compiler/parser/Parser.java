/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.parser;

import compiler.lexer.*;
import compiler.node.*;
import compiler.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PExprList node1 = (PExprList) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AExprList */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AKaratseLine */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce ALefterhsLine */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list, false);
            }
            break;
            case 3: /* reduce AExpr1Expr */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AExpr2Expr */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list, false);
            }
            break;
            case 5: /* reduce AExpr3Expr */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list, false);
            }
            break;
            case 6: /* reduce AFactor1Factor */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list, false);
            }
            break;
            case 7: /* reduce AFactor2Factor */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list, false);
            }
            break;
            case 8: /* reduce AFactor3Factor */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list, false);
            }
            break;
            case 9: /* reduce ATerm1Term */
            {
                ArrayList<Object> list = new9();
                push(goTo(4), list, false);
            }
            break;
            case 10: /* reduce ATerm2Term */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list, false);
            }
            break;
            case 11: /* reduce AVarDec1VarDec */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list, false);
            }
            break;
            case 12: /* reduce AVarIds1VarIds */
            {
                ArrayList<Object> list = new12();
                push(goTo(6), list, false);
            }
            break;
            case 13: /* reduce AVarIds2VarIds */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list, false);
            }
            break;
            case 14: /* reduce AVarType1VarType */
            {
                ArrayList<Object> list = new14();
                push(goTo(7), list, false);
            }
            break;
            case 15: /* reduce AVarType2VarType */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list, false);
            }
            break;
            case 16: /* reduce AVarType3VarType */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list, false);
            }
            break;
            case 17: /* reduce AVarType4VarType */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list, false);
            }
            break;
            case 18: /* reduce ATerminal$Line */
            {
                ArrayList<Object> list = new18();
                push(goTo(8), list, true);
            }
            break;
            case 19: /* reduce ANonTerminal$Line */
            {
                ArrayList<Object> list = new19();
                push(goTo(8), list, true);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AExprList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExprList pexprlistNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pexprlistNode1 = new AExprList(listNode3);
        }
	nodeList.add(pexprlistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AKaratseLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        PExpr pexprNode2;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);

        plineNode1 = new AKaratseLine(pexprNode2);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce ALefterhsLine */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PLine plineNode1;
        {
            // Block
        PVarDec pvardecNode2;
        pvardecNode2 = (PVarDec)nodeArrayList1.get(0);

        plineNode1 = new ALefterhsLine(pvardecNode2);
        }
	nodeList.add(plineNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AExpr1Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PFactor pfactorNode2;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);

        pexprNode1 = new AExpr1Expr(pfactorNode2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AExpr2Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TPlus tplusNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new AExpr2Expr(pexprNode2, tplusNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AExpr3Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TMinus tminusNode3;
        PFactor pfactorNode4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        tminusNode3 = (TMinus)nodeArrayList2.get(0);
        pfactorNode4 = (PFactor)nodeArrayList3.get(0);

        pexprNode1 = new AExpr3Expr(pexprNode2, tminusNode3, pfactorNode4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AFactor1Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PTerm ptermNode2;
        ptermNode2 = (PTerm)nodeArrayList1.get(0);

        pfactorNode1 = new AFactor1Factor(ptermNode2);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AFactor2Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TStar tstarNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tstarNode3 = (TStar)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AFactor2Factor(pfactorNode2, tstarNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AFactor3Factor */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFactor pfactorNode1;
        {
            // Block
        PFactor pfactorNode2;
        TSlash tslashNode3;
        PTerm ptermNode4;
        pfactorNode2 = (PFactor)nodeArrayList1.get(0);
        tslashNode3 = (TSlash)nodeArrayList2.get(0);
        ptermNode4 = (PTerm)nodeArrayList3.get(0);

        pfactorNode1 = new AFactor3Factor(pfactorNode2, tslashNode3, ptermNode4);
        }
	nodeList.add(pfactorNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce ATerm1Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TIntegers tintegersNode2;
        tintegersNode2 = (TIntegers)nodeArrayList1.get(0);

        ptermNode1 = new ATerm1Term(tintegersNode2);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ATerm2Term */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PTerm ptermNode1;
        {
            // Block
        TLPar tlparNode2;
        PExpr pexprNode3;
        TRPar trparNode4;
        tlparNode2 = (TLPar)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        trparNode4 = (TRPar)nodeArrayList3.get(0);

        ptermNode1 = new ATerm2Term(tlparNode2, pexprNode3, trparNode4);
        }
	nodeList.add(ptermNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AVarDec1VarDec */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarDec pvardecNode1;
        {
            // Block
        TVar tvarNode2;
        PVarIds pvaridsNode3;
        TColon tcolonNode4;
        PVarType pvartypeNode5;
        TSemi tsemiNode6;
        tvarNode2 = (TVar)nodeArrayList1.get(0);
        pvaridsNode3 = (PVarIds)nodeArrayList2.get(0);
        tcolonNode4 = (TColon)nodeArrayList3.get(0);
        pvartypeNode5 = (PVarType)nodeArrayList4.get(0);
        tsemiNode6 = (TSemi)nodeArrayList5.get(0);

        pvardecNode1 = new AVarDec1VarDec(tvarNode2, pvaridsNode3, tcolonNode4, pvartypeNode5, tsemiNode6);
        }
	nodeList.add(pvardecNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AVarIds1VarIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarIds pvaridsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);

        pvaridsNode1 = new AVarIds1VarIds(tidentifierNode2);
        }
	nodeList.add(pvaridsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AVarIds2VarIds */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarIds pvaridsNode1;
        {
            // Block
        TIdentifier tidentifierNode2;
        TComma tcommaNode3;
        PVarIds pvaridsNode4;
        tidentifierNode2 = (TIdentifier)nodeArrayList1.get(0);
        tcommaNode3 = (TComma)nodeArrayList2.get(0);
        pvaridsNode4 = (PVarIds)nodeArrayList3.get(0);

        pvaridsNode1 = new AVarIds2VarIds(tidentifierNode2, tcommaNode3, pvaridsNode4);
        }
	nodeList.add(pvaridsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AVarType1VarType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        TInt tintNode2;
        tintNode2 = (TInt)nodeArrayList1.get(0);

        pvartypeNode1 = new AVarType1VarType(tintNode2);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AVarType2VarType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        TChar tcharNode2;
        tcharNode2 = (TChar)nodeArrayList1.get(0);

        pvartypeNode1 = new AVarType2VarType(tcharNode2);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVarType3VarType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        TInt tintNode2;
        TLBr tlbrNode3;
        TIntegers tintegersNode4;
        TRBr trbrNode5;
        tintNode2 = (TInt)nodeArrayList1.get(0);
        tlbrNode3 = (TLBr)nodeArrayList2.get(0);
        tintegersNode4 = (TIntegers)nodeArrayList3.get(0);
        trbrNode5 = (TRBr)nodeArrayList4.get(0);

        pvartypeNode1 = new AVarType3VarType(tintNode2, tlbrNode3, tintegersNode4, trbrNode5);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AVarType4VarType */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarType pvartypeNode1;
        {
            // Block
        TChar tcharNode2;
        TLBr tlbrNode3;
        TIntegers tintegersNode4;
        TRBr trbrNode5;
        tcharNode2 = (TChar)nodeArrayList1.get(0);
        tlbrNode3 = (TLBr)nodeArrayList2.get(0);
        tintegersNode4 = (TIntegers)nodeArrayList3.get(0);
        trbrNode5 = (TRBr)nodeArrayList4.get(0);

        pvartypeNode1 = new AVarType4VarType(tcharNode2, tlbrNode3, tintegersNode4, trbrNode5);
        }
	nodeList.add(pvartypeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ATerminal$Line */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PLine plineNode1;
        plineNode1 = (PLine)nodeArrayList1.get(0);
	if(plineNode1 != null)
	{
	  listNode2.add(plineNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ANonTerminal$Line */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PLine plineNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        plineNode2 = (PLine)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(plineNode2 != null)
	{
	  listNode3.add(plineNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {16, SHIFT, 1}, {18, SHIFT, 2}, {32, SHIFT, 3}, },
			{{-1, ERROR, 1}, {20, SHIFT, 11}, },
			{{-1, REDUCE, 9}, },
			{{-1, ERROR, 3}, {18, SHIFT, 2}, {32, SHIFT, 3}, },
			{{-1, ERROR, 4}, {42, ACCEPT, -1}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 1}, {21, SHIFT, 14}, {22, SHIFT, 15}, },
			{{-1, REDUCE, 3}, {23, SHIFT, 16}, {24, SHIFT, 17}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 0}, {16, SHIFT, 1}, {18, SHIFT, 2}, {32, SHIFT, 3}, },
			{{-1, REDUCE, 12}, {38, SHIFT, 19}, },
			{{-1, ERROR, 12}, {40, SHIFT, 20}, },
			{{-1, ERROR, 13}, {21, SHIFT, 14}, {22, SHIFT, 15}, {33, SHIFT, 21}, },
			{{-1, ERROR, 14}, {18, SHIFT, 2}, {32, SHIFT, 3}, },
			{{-1, ERROR, 15}, {18, SHIFT, 2}, {32, SHIFT, 3}, },
			{{-1, ERROR, 16}, {18, SHIFT, 2}, {32, SHIFT, 3}, },
			{{-1, ERROR, 17}, {18, SHIFT, 2}, {32, SHIFT, 3}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 19}, {20, SHIFT, 11}, },
			{{-1, ERROR, 20}, {2, SHIFT, 27}, {8, SHIFT, 28}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 5}, {23, SHIFT, 16}, {24, SHIFT, 17}, },
			{{-1, REDUCE, 4}, {23, SHIFT, 16}, {24, SHIFT, 17}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 15}, {34, SHIFT, 30}, },
			{{-1, REDUCE, 14}, {34, SHIFT, 31}, },
			{{-1, ERROR, 29}, {39, SHIFT, 32}, },
			{{-1, ERROR, 30}, {18, SHIFT, 33}, },
			{{-1, ERROR, 31}, {18, SHIFT, 34}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 33}, {35, SHIFT, 35}, },
			{{-1, ERROR, 34}, {35, SHIFT, 36}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 16}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 4}, },
			{{-1, 5}, {10, 18}, },
			{{-1, 6}, {3, 13}, },
			{{-1, 7}, {14, 22}, {15, 23}, },
			{{-1, 8}, {16, 24}, {17, 25}, },
			{{-1, 9}, },
			{{-1, 12}, {19, 26}, },
			{{-1, 29}, },
			{{-1, 10}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'var', integers, '('",
			"expecting: identifier",
			"expecting: 'var', integers, '-', '+', '*', '/', '(', ')', EOF",
			"expecting: integers, '('",
			"expecting: EOF",
			"expecting: 'var', integers, '(', EOF",
			"expecting: 'var', integers, '-', '+', '(', EOF",
			"expecting: ',', ':'",
			"expecting: ':'",
			"expecting: '-', '+', ')'",
			"expecting: 'char', 'int'",
			"expecting: '[', ';'",
			"expecting: ';'",
			"expecting: integers",
			"expecting: ']'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 6, 2, 2, 5, 5, 7, 8, 9, 3, 3, 3, 3, 5, 1, 10, 2, 2, 2, 2, 2, 8, 11, 11, 12, 13, 13, 5, 14, 14, 12, 12, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
