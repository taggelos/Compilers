/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class DepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getPProgram().apply(this);
        node.getEOF().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFunDef() != null)
        {
            node.getFunDef().apply(this);
        }
        outAProgram(node);
    }

    public void inAFunDef1FunDef(AFunDef1FunDef node)
    {
        defaultIn(node);
    }

    public void outAFunDef1FunDef(AFunDef1FunDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunDef1FunDef(AFunDef1FunDef node)
    {
        inAFunDef1FunDef(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDef());
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAFunDef1FunDef(node);
    }

    public void inAHeader1Header(AHeader1Header node)
    {
        defaultIn(node);
    }

    public void outAHeader1Header(AHeader1Header node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeader1Header(AHeader1Header node)
    {
        inAHeader1Header(node);
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        outAHeader1Header(node);
    }

    public void inAFparDef1FparDef(AFparDef1FparDef node)
    {
        defaultIn(node);
    }

    public void outAFparDef1FparDef(AFparDef1FparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDef1FparDef(AFparDef1FparDef node)
    {
        inAFparDef1FparDef(node);
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTypes() != null)
        {
            node.getTypes().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAFparDef1FparDef(node);
    }

    public void inAFparDef2FparDef(AFparDef2FparDef node)
    {
        defaultIn(node);
    }

    public void outAFparDef2FparDef(AFparDef2FparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDef2FparDef(AFparDef2FparDef node)
    {
        inAFparDef2FparDef(node);
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAFparDef2FparDef(node);
    }

    public void inAFparDef3FparDef(AFparDef3FparDef node)
    {
        defaultIn(node);
    }

    public void outAFparDef3FparDef(AFparDef3FparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDef3FparDef(AFparDef3FparDef node)
    {
        inAFparDef3FparDef(node);
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTypes() != null)
        {
            node.getTypes().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAFparDef3FparDef(node);
    }

    public void inAFparDef4FparDef(AFparDef4FparDef node)
    {
        defaultIn(node);
    }

    public void outAFparDef4FparDef(AFparDef4FparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDef4FparDef(AFparDef4FparDef node)
    {
        inAFparDef4FparDef(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        outAFparDef4FparDef(node);
    }

    public void inAFparDef5FparDef(AFparDef5FparDef node)
    {
        defaultIn(node);
    }

    public void outAFparDef5FparDef(AFparDef5FparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFparDef5FparDef(AFparDef5FparDef node)
    {
        inAFparDef5FparDef(node);
        outAFparDef5FparDef(node);
    }

    public void inADataTypes1DataTypes(ADataTypes1DataTypes node)
    {
        defaultIn(node);
    }

    public void outADataTypes1DataTypes(ADataTypes1DataTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataTypes1DataTypes(ADataTypes1DataTypes node)
    {
        inADataTypes1DataTypes(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outADataTypes1DataTypes(node);
    }

    public void inADataTypes2DataTypes(ADataTypes2DataTypes node)
    {
        defaultIn(node);
    }

    public void outADataTypes2DataTypes(ADataTypes2DataTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADataTypes2DataTypes(ADataTypes2DataTypes node)
    {
        inADataTypes2DataTypes(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outADataTypes2DataTypes(node);
    }

    public void inAArrayTypes1ArrayTypes(AArrayTypes1ArrayTypes node)
    {
        defaultIn(node);
    }

    public void outAArrayTypes1ArrayTypes(AArrayTypes1ArrayTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayTypes1ArrayTypes(AArrayTypes1ArrayTypes node)
    {
        inAArrayTypes1ArrayTypes(node);
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getIntegers() != null)
        {
            node.getIntegers().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outAArrayTypes1ArrayTypes(node);
    }

    public void inATypes1Types(ATypes1Types node)
    {
        defaultIn(node);
    }

    public void outATypes1Types(ATypes1Types node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypes1Types(ATypes1Types node)
    {
        inATypes1Types(node);
        if(node.getDataTypes() != null)
        {
            node.getDataTypes().apply(this);
        }
        outATypes1Types(node);
    }

    public void inATypes2Types(ATypes2Types node)
    {
        defaultIn(node);
    }

    public void outATypes2Types(ATypes2Types node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATypes2Types(ATypes2Types node)
    {
        inATypes2Types(node);
        if(node.getDataTypes() != null)
        {
            node.getDataTypes().apply(this);
        }
        {
            List<PArrayTypes> copy = new ArrayList<PArrayTypes>(node.getArrayTypes());
            for(PArrayTypes e : copy)
            {
                e.apply(this);
            }
        }
        outATypes2Types(node);
    }

    public void inAReturnType1ReturnType(AReturnType1ReturnType node)
    {
        defaultIn(node);
    }

    public void outAReturnType1ReturnType(AReturnType1ReturnType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnType1ReturnType(AReturnType1ReturnType node)
    {
        inAReturnType1ReturnType(node);
        if(node.getDataTypes() != null)
        {
            node.getDataTypes().apply(this);
        }
        outAReturnType1ReturnType(node);
    }

    public void inAReturnType2ReturnType(AReturnType2ReturnType node)
    {
        defaultIn(node);
    }

    public void outAReturnType2ReturnType(AReturnType2ReturnType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnType2ReturnType(AReturnType2ReturnType node)
    {
        inAReturnType2ReturnType(node);
        if(node.getNothing() != null)
        {
            node.getNothing().apply(this);
        }
        outAReturnType2ReturnType(node);
    }

    public void inALocalDef1LocalDef(ALocalDef1LocalDef node)
    {
        defaultIn(node);
    }

    public void outALocalDef1LocalDef(ALocalDef1LocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalDef1LocalDef(ALocalDef1LocalDef node)
    {
        inALocalDef1LocalDef(node);
        if(node.getFunDef() != null)
        {
            node.getFunDef().apply(this);
        }
        outALocalDef1LocalDef(node);
    }

    public void inALocalDef2LocalDef(ALocalDef2LocalDef node)
    {
        defaultIn(node);
    }

    public void outALocalDef2LocalDef(ALocalDef2LocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalDef2LocalDef(ALocalDef2LocalDef node)
    {
        inALocalDef2LocalDef(node);
        if(node.getFunDec() != null)
        {
            node.getFunDec().apply(this);
        }
        outALocalDef2LocalDef(node);
    }

    public void inALocalDef3LocalDef(ALocalDef3LocalDef node)
    {
        defaultIn(node);
    }

    public void outALocalDef3LocalDef(ALocalDef3LocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALocalDef3LocalDef(ALocalDef3LocalDef node)
    {
        inALocalDef3LocalDef(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        outALocalDef3LocalDef(node);
    }

    public void inAFunDecFunDec(AFunDecFunDec node)
    {
        defaultIn(node);
    }

    public void outAFunDecFunDec(AFunDecFunDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunDecFunDec(AFunDecFunDec node)
    {
        inAFunDecFunDec(node);
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAFunDecFunDec(node);
    }

    public void inABlockBlock(ABlockBlock node)
    {
        defaultIn(node);
    }

    public void outABlockBlock(ABlockBlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockBlock(ABlockBlock node)
    {
        inABlockBlock(node);
        if(node.getLAg() != null)
        {
            node.getLAg().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getRAg() != null)
        {
            node.getRAg().apply(this);
        }
        outABlockBlock(node);
    }

    public void inAStmt1Stmt(AStmt1Stmt node)
    {
        defaultIn(node);
    }

    public void outAStmt1Stmt(AStmt1Stmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmt1Stmt(AStmt1Stmt node)
    {
        inAStmt1Stmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAStmt1Stmt(node);
    }

    public void inAStmt2Stmt(AStmt2Stmt node)
    {
        defaultIn(node);
    }

    public void outAStmt2Stmt(AStmt2Stmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmt2Stmt(AStmt2Stmt node)
    {
        inAStmt2Stmt(node);
        if(node.getLVal() != null)
        {
            node.getLVal().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAStmt2Stmt(node);
    }

    public void inAStmt3Stmt(AStmt3Stmt node)
    {
        defaultIn(node);
    }

    public void outAStmt3Stmt(AStmt3Stmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmt3Stmt(AStmt3Stmt node)
    {
        inAStmt3Stmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outAStmt3Stmt(node);
    }

    public void inAStmt4Stmt(AStmt4Stmt node)
    {
        defaultIn(node);
    }

    public void outAStmt4Stmt(AStmt4Stmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmt4Stmt(AStmt4Stmt node)
    {
        inAStmt4Stmt(node);
        if(node.getFunCal() != null)
        {
            node.getFunCal().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAStmt4Stmt(node);
    }

    public void inAIfstmtStmt(AIfstmtStmt node)
    {
        defaultIn(node);
    }

    public void outAIfstmtStmt(AIfstmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfstmtStmt(AIfstmtStmt node)
    {
        inAIfstmtStmt(node);
        if(node.getIfstmt() != null)
        {
            node.getIfstmt().apply(this);
        }
        outAIfstmtStmt(node);
    }

    public void inAWhilestmtStmt(AWhilestmtStmt node)
    {
        defaultIn(node);
    }

    public void outAWhilestmtStmt(AWhilestmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhilestmtStmt(AWhilestmtStmt node)
    {
        inAWhilestmtStmt(node);
        if(node.getWhilestmt() != null)
        {
            node.getWhilestmt().apply(this);
        }
        outAWhilestmtStmt(node);
    }

    public void inAReturnstmtStmt(AReturnstmtStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnstmtStmt(AReturnstmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnstmtStmt(AReturnstmtStmt node)
    {
        inAReturnstmtStmt(node);
        if(node.getReturnstmt() != null)
        {
            node.getReturnstmt().apply(this);
        }
        outAReturnstmtStmt(node);
    }

    public void inAAssignment(AAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssignment(AAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignment(AAssignment node)
    {
        inAAssignment(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAAssignment(node);
    }

    public void inALVal1LVal(ALVal1LVal node)
    {
        defaultIn(node);
    }

    public void outALVal1LVal(ALVal1LVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALVal1LVal(ALVal1LVal node)
    {
        inALVal1LVal(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outALVal1LVal(node);
    }

    public void inALVal2LVal(ALVal2LVal node)
    {
        defaultIn(node);
    }

    public void outALVal2LVal(ALVal2LVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALVal2LVal(ALVal2LVal node)
    {
        inALVal2LVal(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outALVal2LVal(node);
    }

    public void inALVal3LVal(ALVal3LVal node)
    {
        defaultIn(node);
    }

    public void outALVal3LVal(ALVal3LVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALVal3LVal(ALVal3LVal node)
    {
        inALVal3LVal(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        outALVal3LVal(node);
    }

    public void inAFunCal1FunCal(AFunCal1FunCal node)
    {
        defaultIn(node);
    }

    public void outAFunCal1FunCal(AFunCal1FunCal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunCal1FunCal(AFunCal1FunCal node)
    {
        inAFunCal1FunCal(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getExprList() != null)
        {
            node.getExprList().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        outAFunCal1FunCal(node);
    }

    public void inAExprList1ExprList(AExprList1ExprList node)
    {
        defaultIn(node);
    }

    public void outAExprList1ExprList(AExprList1ExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprList1ExprList(AExprList1ExprList node)
    {
        inAExprList1ExprList(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAExprList1ExprList(node);
    }

    public void inAExprList2ExprList(AExprList2ExprList node)
    {
        defaultIn(node);
    }

    public void outAExprList2ExprList(AExprList2ExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprList2ExprList(AExprList2ExprList node)
    {
        inAExprList2ExprList(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExprList() != null)
        {
            node.getExprList().apply(this);
        }
        outAExprList2ExprList(node);
    }

    public void inAExprList3ExprList(AExprList3ExprList node)
    {
        defaultIn(node);
    }

    public void outAExprList3ExprList(AExprList3ExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExprList3ExprList(AExprList3ExprList node)
    {
        inAExprList3ExprList(node);
        outAExprList3ExprList(node);
    }

    public void inAVarDef1VarDef(AVarDef1VarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDef1VarDef(AVarDef1VarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDef1VarDef(AVarDef1VarDef node)
    {
        inAVarDef1VarDef(node);
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        if(node.getVarIds() != null)
        {
            node.getVarIds().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getTypes() != null)
        {
            node.getTypes().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAVarDef1VarDef(node);
    }

    public void inAVarIds1VarIds(AVarIds1VarIds node)
    {
        defaultIn(node);
    }

    public void outAVarIds1VarIds(AVarIds1VarIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarIds1VarIds(AVarIds1VarIds node)
    {
        inAVarIds1VarIds(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAVarIds1VarIds(node);
    }

    public void inAVarIds2VarIds(AVarIds2VarIds node)
    {
        defaultIn(node);
    }

    public void outAVarIds2VarIds(AVarIds2VarIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarIds2VarIds(AVarIds2VarIds node)
    {
        inAVarIds2VarIds(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getVarIds() != null)
        {
            node.getVarIds().apply(this);
        }
        outAVarIds2VarIds(node);
    }

    public void inAWhilestmt(AWhilestmt node)
    {
        defaultIn(node);
    }

    public void outAWhilestmt(AWhilestmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhilestmt(AWhilestmt node)
    {
        inAWhilestmt(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        outAWhilestmt(node);
    }

    public void inAWhileWithElse(AWhileWithElse node)
    {
        defaultIn(node);
    }

    public void outAWhileWithElse(AWhileWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileWithElse(AWhileWithElse node)
    {
        inAWhileWithElse(node);
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getStmtWithElse() != null)
        {
            node.getStmtWithElse().apply(this);
        }
        outAWhileWithElse(node);
    }

    public void inAIfstmt(AIfstmt node)
    {
        defaultIn(node);
    }

    public void outAIfstmt(AIfstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfstmt(AIfstmt node)
    {
        inAIfstmt(node);
        if(node.getIfHeader() != null)
        {
            node.getIfHeader().apply(this);
        }
        if(node.getIfTrail() != null)
        {
            node.getIfTrail().apply(this);
        }
        outAIfstmt(node);
    }

    public void inAIfHeader(AIfHeader node)
    {
        defaultIn(node);
    }

    public void outAIfHeader(AIfHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfHeader(AIfHeader node)
    {
        inAIfHeader(node);
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        outAIfHeader(node);
    }

    public void inANoElseIfTrail(ANoElseIfTrail node)
    {
        defaultIn(node);
    }

    public void outANoElseIfTrail(ANoElseIfTrail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoElseIfTrail(ANoElseIfTrail node)
    {
        inANoElseIfTrail(node);
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        outANoElseIfTrail(node);
    }

    public void inAWithElseIfTrail(AWithElseIfTrail node)
    {
        defaultIn(node);
    }

    public void outAWithElseIfTrail(AWithElseIfTrail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithElseIfTrail(AWithElseIfTrail node)
    {
        inAWithElseIfTrail(node);
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseSt() != null)
        {
            node.getElseSt().apply(this);
        }
        outAWithElseIfTrail(node);
    }

    public void inASemiStmtWithElse(ASemiStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outASemiStmtWithElse(ASemiStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiStmtWithElse(ASemiStmtWithElse node)
    {
        inASemiStmtWithElse(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiStmtWithElse(node);
    }

    public void inAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        inAAssignmentStmtWithElse(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentStmtWithElse(node);
    }

    public void inAStmtReturnstmtStmtWithElse(AStmtReturnstmtStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAStmtReturnstmtStmtWithElse(AStmtReturnstmtStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtReturnstmtStmtWithElse(AStmtReturnstmtStmtWithElse node)
    {
        inAStmtReturnstmtStmtWithElse(node);
        if(node.getReturnstmt() != null)
        {
            node.getReturnstmt().apply(this);
        }
        outAStmtReturnstmtStmtWithElse(node);
    }

    public void inAStmtFuncalStmtWithElse(AStmtFuncalStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAStmtFuncalStmtWithElse(AStmtFuncalStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtFuncalStmtWithElse(AStmtFuncalStmtWithElse node)
    {
        inAStmtFuncalStmtWithElse(node);
        if(node.getFunCal() != null)
        {
            node.getFunCal().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAStmtFuncalStmtWithElse(node);
    }

    public void inABlockStmtWithElse(ABlockStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outABlockStmtWithElse(ABlockStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmtWithElse(ABlockStmtWithElse node)
    {
        inABlockStmtWithElse(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStmtWithElse(node);
    }

    public void inAIfStmtWithElse(AIfStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAIfStmtWithElse(AIfStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtWithElse(AIfStmtWithElse node)
    {
        inAIfStmtWithElse(node);
        if(node.getIfElse() != null)
        {
            node.getIfElse().apply(this);
        }
        outAIfStmtWithElse(node);
    }

    public void inAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        inAWhileStmtWithElse(node);
        if(node.getWhileWithElse() != null)
        {
            node.getWhileWithElse().apply(this);
        }
        outAWhileStmtWithElse(node);
    }

    public void inAIfElse(AIfElse node)
    {
        defaultIn(node);
    }

    public void outAIfElse(AIfElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElse(AIfElse node)
    {
        inAIfElse(node);
        if(node.getIfHeader() != null)
        {
            node.getIfHeader().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getElseSt() != null)
        {
            node.getElseSt().apply(this);
        }
        outAIfElse(node);
    }

    public void inACond(ACond node)
    {
        defaultIn(node);
    }

    public void outACond(ACond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACond(ACond node)
    {
        inACond(node);
        if(node.getIntegers() != null)
        {
            node.getIntegers().apply(this);
        }
        outACond(node);
    }

    public void inAReturnstmt1Returnstmt(AReturnstmt1Returnstmt node)
    {
        defaultIn(node);
    }

    public void outAReturnstmt1Returnstmt(AReturnstmt1Returnstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnstmt1Returnstmt(AReturnstmt1Returnstmt node)
    {
        inAReturnstmt1Returnstmt(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAReturnstmt1Returnstmt(node);
    }

    public void inAReturnstmt2Returnstmt(AReturnstmt2Returnstmt node)
    {
        defaultIn(node);
    }

    public void outAReturnstmt2Returnstmt(AReturnstmt2Returnstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnstmt2Returnstmt(AReturnstmt2Returnstmt node)
    {
        inAReturnstmt2Returnstmt(node);
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outAReturnstmt2Returnstmt(node);
    }

    public void inAExpr1Expr(AExpr1Expr node)
    {
        defaultIn(node);
    }

    public void outAExpr1Expr(AExpr1Expr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr1Expr(AExpr1Expr node)
    {
        inAExpr1Expr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAExpr1Expr(node);
    }

    public void inAExpr2Expr(AExpr2Expr node)
    {
        defaultIn(node);
    }

    public void outAExpr2Expr(AExpr2Expr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr2Expr(AExpr2Expr node)
    {
        inAExpr2Expr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAExpr2Expr(node);
    }

    public void inAExpr3Expr(AExpr3Expr node)
    {
        defaultIn(node);
    }

    public void outAExpr3Expr(AExpr3Expr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr3Expr(AExpr3Expr node)
    {
        inAExpr3Expr(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAExpr3Expr(node);
    }

    public void inAExpr4Expr(AExpr4Expr node)
    {
        defaultIn(node);
    }

    public void outAExpr4Expr(AExpr4Expr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr4Expr(AExpr4Expr node)
    {
        inAExpr4Expr(node);
        if(node.getLVal() != null)
        {
            node.getLVal().apply(this);
        }
        outAExpr4Expr(node);
    }

    public void inAExpr5Expr(AExpr5Expr node)
    {
        defaultIn(node);
    }

    public void outAExpr5Expr(AExpr5Expr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAExpr5Expr(AExpr5Expr node)
    {
        inAExpr5Expr(node);
        if(node.getFunCal() != null)
        {
            node.getFunCal().apply(this);
        }
        outAExpr5Expr(node);
    }

    public void inAFactor1Factor(AFactor1Factor node)
    {
        defaultIn(node);
    }

    public void outAFactor1Factor(AFactor1Factor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactor1Factor(AFactor1Factor node)
    {
        inAFactor1Factor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAFactor1Factor(node);
    }

    public void inAFactor2Factor(AFactor2Factor node)
    {
        defaultIn(node);
    }

    public void outAFactor2Factor(AFactor2Factor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactor2Factor(AFactor2Factor node)
    {
        inAFactor2Factor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAFactor2Factor(node);
    }

    public void inAFactor3Factor(AFactor3Factor node)
    {
        defaultIn(node);
    }

    public void outAFactor3Factor(AFactor3Factor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactor3Factor(AFactor3Factor node)
    {
        inAFactor3Factor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getSlash() != null)
        {
            node.getSlash().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAFactor3Factor(node);
    }

    public void inAFactor4Factor(AFactor4Factor node)
    {
        defaultIn(node);
    }

    public void outAFactor4Factor(AFactor4Factor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactor4Factor(AFactor4Factor node)
    {
        inAFactor4Factor(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outAFactor4Factor(node);
    }

    public void inATerm1Term(ATerm1Term node)
    {
        defaultIn(node);
    }

    public void outATerm1Term(ATerm1Term node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerm1Term(ATerm1Term node)
    {
        inATerm1Term(node);
        if(node.getIntegers() != null)
        {
            node.getIntegers().apply(this);
        }
        outATerm1Term(node);
    }

    public void inATerm2Term(ATerm2Term node)
    {
        defaultIn(node);
    }

    public void outATerm2Term(ATerm2Term node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATerm2Term(ATerm2Term node)
    {
        inATerm2Term(node);
        if(node.getCharConst() != null)
        {
            node.getCharConst().apply(this);
        }
        outATerm2Term(node);
    }
}
