/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import compiler.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFunDef(AFunDef node);
    void caseAHeader(AHeader node);
    void caseASimpleParFparDef(ASimpleParFparDef node);
    void caseAMultParFparDef(AMultParFparDef node);
    void caseAMultTypesFparDef(AMultTypesFparDef node);
    void caseASemiParFparDef(ASemiParFparDef node);
    void caseANoneFparDef(ANoneFparDef node);
    void caseAIntDataTypes(AIntDataTypes node);
    void caseACharDataTypes(ACharDataTypes node);
    void caseABracketsArrayTypes(ABracketsArrayTypes node);
    void caseASimpleTypes(ASimpleTypes node);
    void caseAArrayTypes(AArrayTypes node);
    void caseASimpleReturnType(ASimpleReturnType node);
    void caseANoneReturnType(ANoneReturnType node);
    void caseAFunLocalDef(AFunLocalDef node);
    void caseADecLocalDef(ADecLocalDef node);
    void caseAVarLocalDef(AVarLocalDef node);
    void caseAFunDec(AFunDec node);
    void caseABlock(ABlock node);
    void caseASemiStmt(ASemiStmt node);
    void caseAAssignmentStmt(AAssignmentStmt node);
    void caseABlockStmt(ABlockStmt node);
    void caseAFunCalStmt(AFunCalStmt node);
    void caseAIfstmtStmt(AIfstmtStmt node);
    void caseAWhilestmtStmt(AWhilestmtStmt node);
    void caseAReturnstmtStmt(AReturnstmtStmt node);
    void caseAAssignment(AAssignment node);
    void caseAIdLVal(AIdLVal node);
    void caseAStringLVal(AStringLVal node);
    void caseAIdBracketsLVal(AIdBracketsLVal node);
    void caseAFunCal(AFunCal node);
    void caseASimpleExprList(ASimpleExprList node);
    void caseAListExprList(AListExprList node);
    void caseANoneExprList(ANoneExprList node);
    void caseAVarDef(AVarDef node);
    void caseAIdVarIds(AIdVarIds node);
    void caseAListVarIds(AListVarIds node);
    void caseAWhilestmt(AWhilestmt node);
    void caseAWhileWithElse(AWhileWithElse node);
    void caseAIfstmt(AIfstmt node);
    void caseAIfHeader(AIfHeader node);
    void caseANoElseIfTrail(ANoElseIfTrail node);
    void caseAWithElseIfTrail(AWithElseIfTrail node);
    void caseASemiStmtWithElse(ASemiStmtWithElse node);
    void caseAAssignmentStmtWithElse(AAssignmentStmtWithElse node);
    void caseAStmtReturnstmtStmtWithElse(AStmtReturnstmtStmtWithElse node);
    void caseAStmtFuncalStmtWithElse(AStmtFuncalStmtWithElse node);
    void caseABlockStmtWithElse(ABlockStmtWithElse node);
    void caseAIfStmtWithElse(AIfStmtWithElse node);
    void caseAWhileStmtWithElse(AWhileStmtWithElse node);
    void caseAIfElse(AIfElse node);
    void caseACondNotCond(ACondNotCond node);
    void caseACondOrAndCond(ACondOrAndCond node);
    void caseACondAndConditionalOrExpression(ACondAndConditionalOrExpression node);
    void caseACondOrConditionalOrExpression(ACondOrConditionalOrExpression node);
    void caseAComparativeConditionalAndExpression(AComparativeConditionalAndExpression node);
    void caseAAndExprConditionalAndExpression(AAndExprConditionalAndExpression node);
    void caseARelationalComparativeExpression(ARelationalComparativeExpression node);
    void caseAEqualComparativeExpression(AEqualComparativeExpression node);
    void caseANotEqualComparativeExpression(ANotEqualComparativeExpression node);
    void caseAAdditiveRelationalExpression(AAdditiveRelationalExpression node);
    void caseALessThanRelationalExpression(ALessThanRelationalExpression node);
    void caseAGreaterThanRelationalExpression(AGreaterThanRelationalExpression node);
    void caseAGreaterEqualThanRelationalExpression(AGreaterEqualThanRelationalExpression node);
    void caseALessEqualThanRelationalExpression(ALessEqualThanRelationalExpression node);
    void caseASemiReturnstmt(ASemiReturnstmt node);
    void caseAFactorExpr(AFactorExpr node);
    void caseAAddExpr(AAddExpr node);
    void caseASubExpr(ASubExpr node);
    void caseATermFactor(ATermFactor node);
    void caseAMultFactor(AMultFactor node);
    void caseAModFactor(AModFactor node);
    void caseADivFactor(ADivFactor node);
    void caseAIntTerm(AIntTerm node);
    void caseACharTerm(ACharTerm node);
    void caseALValTerm(ALValTerm node);
    void caseAFunCalTerm(AFunCalTerm node);
    void caseAParTerm(AParTerm node);
    void caseAPlusPlusOrMinus(APlusPlusOrMinus node);
    void caseAMinusPlusOrMinus(AMinusPlusOrMinus node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTEscapeSeq(TEscapeSeq node);
    void caseTComment(TComment node);
    void caseTAnd(TAnd node);
    void caseTChar(TChar node);
    void caseTDiv(TDiv node);
    void caseTDo(TDo node);
    void caseTElse(TElse node);
    void caseTFun(TFun node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTMod(TMod node);
    void caseTNot(TNot node);
    void caseTNothing(TNothing node);
    void caseTOr(TOr node);
    void caseTRef(TRef node);
    void caseTReturn(TReturn node);
    void caseTThen(TThen node);
    void caseTVar(TVar node);
    void caseTWhile(TWhile node);
    void caseTIdentifier(TIdentifier node);
    void caseTIntegers(TIntegers node);
    void caseTCharConst(TCharConst node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTMinus(TMinus node);
    void caseTPlus(TPlus node);
    void caseTStar(TStar node);
    void caseTNeq(TNeq node);
    void caseTEq(TEq node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTLAg(TLAg node);
    void caseTRAg(TRAg node);
    void caseTComma(TComma node);
    void caseTSemi(TSemi node);
    void caseTColon(TColon node);
    void caseTArrow(TArrow node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
