/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import compiler.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgram(AProgram node);
    void caseAFunDef1FunDef(AFunDef1FunDef node);
    void caseAHeader1Header(AHeader1Header node);
    void caseAFparDef1FparDef(AFparDef1FparDef node);
    void caseAFparDef2FparDef(AFparDef2FparDef node);
    void caseAFparDef3FparDef(AFparDef3FparDef node);
    void caseAFparDef4FparDef(AFparDef4FparDef node);
    void caseAFparDef5FparDef(AFparDef5FparDef node);
    void caseADataTypes1DataTypes(ADataTypes1DataTypes node);
    void caseADataTypes2DataTypes(ADataTypes2DataTypes node);
    void caseAArrayTypes1ArrayTypes(AArrayTypes1ArrayTypes node);
    void caseATypes1Types(ATypes1Types node);
    void caseATypes2Types(ATypes2Types node);
    void caseAReturnType1ReturnType(AReturnType1ReturnType node);
    void caseAReturnType2ReturnType(AReturnType2ReturnType node);
    void caseALocalDef1LocalDef(ALocalDef1LocalDef node);
    void caseALocalDef2LocalDef(ALocalDef2LocalDef node);
    void caseALocalDef3LocalDef(ALocalDef3LocalDef node);
    void caseAFunDecFunDec(AFunDecFunDec node);
    void caseABlockBlock(ABlockBlock node);
    void caseAStmt1Stmt(AStmt1Stmt node);
    void caseAStmt2Stmt(AStmt2Stmt node);
    void caseAStmt3Stmt(AStmt3Stmt node);
    void caseAStmt4Stmt(AStmt4Stmt node);
    void caseAIfstmtStmt(AIfstmtStmt node);
    void caseAWhilestmtStmt(AWhilestmtStmt node);
    void caseAReturnstmtStmt(AReturnstmtStmt node);
    void caseAAssignment(AAssignment node);
    void caseALVal1LVal(ALVal1LVal node);
    void caseALVal2LVal(ALVal2LVal node);
    void caseALVal3LVal(ALVal3LVal node);
    void caseAFunCal1FunCal(AFunCal1FunCal node);
    void caseAExprList1ExprList(AExprList1ExprList node);
    void caseAExprList2ExprList(AExprList2ExprList node);
    void caseAExprList3ExprList(AExprList3ExprList node);
    void caseAVarDef1VarDef(AVarDef1VarDef node);
    void caseAVarIds1VarIds(AVarIds1VarIds node);
    void caseAVarIds2VarIds(AVarIds2VarIds node);
    void caseAWhilestmt(AWhilestmt node);
    void caseAWhileWithElse(AWhileWithElse node);
    void caseAIfstmt(AIfstmt node);
    void caseAIfHeader(AIfHeader node);
    void caseANoElseIfTrail(ANoElseIfTrail node);
    void caseAWithElseIfTrail(AWithElseIfTrail node);
    void caseASemiStmtWithElse(ASemiStmtWithElse node);
    void caseAAssignmentStmtWithElse(AAssignmentStmtWithElse node);
    void caseAStmtReturnstmtStmtWithElse(AStmtReturnstmtStmtWithElse node);
    void caseAStmtFuncalStmtWithElse(AStmtFuncalStmtWithElse node);
    void caseABlockStmtWithElse(ABlockStmtWithElse node);
    void caseAIfStmtWithElse(AIfStmtWithElse node);
    void caseAWhileStmtWithElse(AWhileStmtWithElse node);
    void caseAIfElse(AIfElse node);
    void caseACondNotCond(ACondNotCond node);
    void caseACondOrAndCond(ACondOrAndCond node);
    void caseACondAndConditionalOrExpression(ACondAndConditionalOrExpression node);
    void caseACondOrConditionalOrExpression(ACondOrConditionalOrExpression node);
    void caseAComparativeConditionalAndExpression(AComparativeConditionalAndExpression node);
    void caseAAndExprConditionalAndExpression(AAndExprConditionalAndExpression node);
    void caseARelationalComparativeExpression(ARelationalComparativeExpression node);
    void caseAEqualComparativeExpression(AEqualComparativeExpression node);
    void caseANotEqualComparativeExpression(ANotEqualComparativeExpression node);
    void caseAAdditiveRelationalExpression(AAdditiveRelationalExpression node);
    void caseALessThanRelationalExpression(ALessThanRelationalExpression node);
    void caseAGreaterThanRelationalExpression(AGreaterThanRelationalExpression node);
    void caseAGreaterEqualThanRelationalExpression(AGreaterEqualThanRelationalExpression node);
    void caseALessEqualThanRelationalExpression(ALessEqualThanRelationalExpression node);
    void caseAReturnstmt1Returnstmt(AReturnstmt1Returnstmt node);
    void caseAReturnstmt2Returnstmt(AReturnstmt2Returnstmt node);
    void caseAExpr1Expr(AExpr1Expr node);
    void caseAExpr2Expr(AExpr2Expr node);
    void caseAExpr3Expr(AExpr3Expr node);
    void caseAFactor1Factor(AFactor1Factor node);
    void caseAFactor2Factor(AFactor2Factor node);
    void caseAFactor3Factor(AFactor3Factor node);
    void caseAFactor4Factor(AFactor4Factor node);
    void caseAFactor5Factor(AFactor5Factor node);
    void caseATerm1Term(ATerm1Term node);
    void caseATerm2Term(ATerm2Term node);
    void caseATerm3Term(ATerm3Term node);
    void caseATerm4Term(ATerm4Term node);
    void caseATerm5Term(ATerm5Term node);

    void caseTWhiteSpace(TWhiteSpace node);
    void caseTEscapeSeq(TEscapeSeq node);
    void caseTAnd(TAnd node);
    void caseTChar(TChar node);
    void caseTDiv(TDiv node);
    void caseTDo(TDo node);
    void caseTElse(TElse node);
    void caseTFun(TFun node);
    void caseTIf(TIf node);
    void caseTInt(TInt node);
    void caseTMod(TMod node);
    void caseTNot(TNot node);
    void caseTNothing(TNothing node);
    void caseTOr(TOr node);
    void caseTRef(TRef node);
    void caseTReturn(TReturn node);
    void caseTThen(TThen node);
    void caseTVar(TVar node);
    void caseTWhile(TWhile node);
    void caseTIntegers(TIntegers node);
    void caseTStringLiteral(TStringLiteral node);
    void caseTCharConst(TCharConst node);
    void caseTIdentifier(TIdentifier node);
    void caseTMinus(TMinus node);
    void caseTPlus(TPlus node);
    void caseTStar(TStar node);
    void caseTSlash(TSlash node);
    void caseTNeq(TNeq node);
    void caseTEq(TEq node);
    void caseTLt(TLt node);
    void caseTGt(TGt node);
    void caseTLteq(TLteq node);
    void caseTGteq(TGteq node);
    void caseTLPar(TLPar node);
    void caseTRPar(TRPar node);
    void caseTLBr(TLBr node);
    void caseTRBr(TRBr node);
    void caseTLAg(TLAg node);
    void caseTRAg(TRAg node);
    void caseTComma(TComma node);
    void caseTSemi(TSemi node);
    void caseTColon(TColon node);
    void caseTArrow(TArrow node);
    void caseTComment(TComment node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
