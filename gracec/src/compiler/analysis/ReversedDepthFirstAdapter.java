/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.analysis;

import java.util.*;
import compiler.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPProgram().apply(this);
        outStart(node);
    }

    public void inAProgram(AProgram node)
    {
        defaultIn(node);
    }

    public void outAProgram(AProgram node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAProgram(AProgram node)
    {
        inAProgram(node);
        if(node.getFunDef() != null)
        {
            node.getFunDef().apply(this);
        }
        outAProgram(node);
    }

    public void inAFunDef(AFunDef node)
    {
        defaultIn(node);
    }

    public void outAFunDef(AFunDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunDef(AFunDef node)
    {
        inAFunDef(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        {
            List<PLocalDef> copy = new ArrayList<PLocalDef>(node.getLocalDef());
            Collections.reverse(copy);
            for(PLocalDef e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        outAFunDef(node);
    }

    public void inAHeader(AHeader node)
    {
        defaultIn(node);
    }

    public void outAHeader(AHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAHeader(AHeader node)
    {
        inAHeader(node);
        if(node.getReturnType() != null)
        {
            node.getReturnType().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getFun() != null)
        {
            node.getFun().apply(this);
        }
        outAHeader(node);
    }

    public void inASimpleParFparDef(ASimpleParFparDef node)
    {
        defaultIn(node);
    }

    public void outASimpleParFparDef(ASimpleParFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleParFparDef(ASimpleParFparDef node)
    {
        inASimpleParFparDef(node);
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        if(node.getTypes() != null)
        {
            node.getTypes().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        outASimpleParFparDef(node);
    }

    public void inAMultParFparDef(AMultParFparDef node)
    {
        defaultIn(node);
    }

    public void outAMultParFparDef(AMultParFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultParFparDef(AMultParFparDef node)
    {
        inAMultParFparDef(node);
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        outAMultParFparDef(node);
    }

    public void inAMultTypesFparDef(AMultTypesFparDef node)
    {
        defaultIn(node);
    }

    public void outAMultTypesFparDef(AMultTypesFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultTypesFparDef(AMultTypesFparDef node)
    {
        inAMultTypesFparDef(node);
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getTypes() != null)
        {
            node.getTypes().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        if(node.getRef() != null)
        {
            node.getRef().apply(this);
        }
        outAMultTypesFparDef(node);
    }

    public void inASemiParFparDef(ASemiParFparDef node)
    {
        defaultIn(node);
    }

    public void outASemiParFparDef(ASemiParFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiParFparDef(ASemiParFparDef node)
    {
        inASemiParFparDef(node);
        if(node.getFparDef() != null)
        {
            node.getFparDef().apply(this);
        }
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiParFparDef(node);
    }

    public void inANoneFparDef(ANoneFparDef node)
    {
        defaultIn(node);
    }

    public void outANoneFparDef(ANoneFparDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoneFparDef(ANoneFparDef node)
    {
        inANoneFparDef(node);
        outANoneFparDef(node);
    }

    public void inAIntDataTypes(AIntDataTypes node)
    {
        defaultIn(node);
    }

    public void outAIntDataTypes(AIntDataTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntDataTypes(AIntDataTypes node)
    {
        inAIntDataTypes(node);
        if(node.getInt() != null)
        {
            node.getInt().apply(this);
        }
        outAIntDataTypes(node);
    }

    public void inACharDataTypes(ACharDataTypes node)
    {
        defaultIn(node);
    }

    public void outACharDataTypes(ACharDataTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharDataTypes(ACharDataTypes node)
    {
        inACharDataTypes(node);
        if(node.getChar() != null)
        {
            node.getChar().apply(this);
        }
        outACharDataTypes(node);
    }

    public void inABracketsArrayTypes(ABracketsArrayTypes node)
    {
        defaultIn(node);
    }

    public void outABracketsArrayTypes(ABracketsArrayTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABracketsArrayTypes(ABracketsArrayTypes node)
    {
        inABracketsArrayTypes(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getIntegers() != null)
        {
            node.getIntegers().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        outABracketsArrayTypes(node);
    }

    public void inASimpleTypes(ASimpleTypes node)
    {
        defaultIn(node);
    }

    public void outASimpleTypes(ASimpleTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleTypes(ASimpleTypes node)
    {
        inASimpleTypes(node);
        if(node.getDataTypes() != null)
        {
            node.getDataTypes().apply(this);
        }
        outASimpleTypes(node);
    }

    public void inAArrayTypes(AArrayTypes node)
    {
        defaultIn(node);
    }

    public void outAArrayTypes(AArrayTypes node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAArrayTypes(AArrayTypes node)
    {
        inAArrayTypes(node);
        {
            List<PArrayTypes> copy = new ArrayList<PArrayTypes>(node.getArrayTypes());
            Collections.reverse(copy);
            for(PArrayTypes e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getDataTypes() != null)
        {
            node.getDataTypes().apply(this);
        }
        outAArrayTypes(node);
    }

    public void inASimpleReturnType(ASimpleReturnType node)
    {
        defaultIn(node);
    }

    public void outASimpleReturnType(ASimpleReturnType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleReturnType(ASimpleReturnType node)
    {
        inASimpleReturnType(node);
        if(node.getDataTypes() != null)
        {
            node.getDataTypes().apply(this);
        }
        outASimpleReturnType(node);
    }

    public void inANoneReturnType(ANoneReturnType node)
    {
        defaultIn(node);
    }

    public void outANoneReturnType(ANoneReturnType node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoneReturnType(ANoneReturnType node)
    {
        inANoneReturnType(node);
        if(node.getNothing() != null)
        {
            node.getNothing().apply(this);
        }
        outANoneReturnType(node);
    }

    public void inAFunLocalDef(AFunLocalDef node)
    {
        defaultIn(node);
    }

    public void outAFunLocalDef(AFunLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunLocalDef(AFunLocalDef node)
    {
        inAFunLocalDef(node);
        if(node.getFunDef() != null)
        {
            node.getFunDef().apply(this);
        }
        outAFunLocalDef(node);
    }

    public void inADecLocalDef(ADecLocalDef node)
    {
        defaultIn(node);
    }

    public void outADecLocalDef(ADecLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADecLocalDef(ADecLocalDef node)
    {
        inADecLocalDef(node);
        if(node.getFunDec() != null)
        {
            node.getFunDec().apply(this);
        }
        outADecLocalDef(node);
    }

    public void inAVarLocalDef(AVarLocalDef node)
    {
        defaultIn(node);
    }

    public void outAVarLocalDef(AVarLocalDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarLocalDef(AVarLocalDef node)
    {
        inAVarLocalDef(node);
        if(node.getVarDef() != null)
        {
            node.getVarDef().apply(this);
        }
        outAVarLocalDef(node);
    }

    public void inAFunDec(AFunDec node)
    {
        defaultIn(node);
    }

    public void outAFunDec(AFunDec node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunDec(AFunDec node)
    {
        inAFunDec(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getHeader() != null)
        {
            node.getHeader().apply(this);
        }
        outAFunDec(node);
    }

    public void inABlock(ABlock node)
    {
        defaultIn(node);
    }

    public void outABlock(ABlock node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlock(ABlock node)
    {
        inABlock(node);
        if(node.getRAg() != null)
        {
            node.getRAg().apply(this);
        }
        {
            List<PStmt> copy = new ArrayList<PStmt>(node.getStmt());
            Collections.reverse(copy);
            for(PStmt e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getLAg() != null)
        {
            node.getLAg().apply(this);
        }
        outABlock(node);
    }

    public void inASemiStmt(ASemiStmt node)
    {
        defaultIn(node);
    }

    public void outASemiStmt(ASemiStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiStmt(ASemiStmt node)
    {
        inASemiStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiStmt(node);
    }

    public void inAAssignmentStmt(AAssignmentStmt node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStmt(AAssignmentStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStmt(AAssignmentStmt node)
    {
        inAAssignmentStmt(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentStmt(node);
    }

    public void inABlockStmt(ABlockStmt node)
    {
        defaultIn(node);
    }

    public void outABlockStmt(ABlockStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmt(ABlockStmt node)
    {
        inABlockStmt(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStmt(node);
    }

    public void inAFunCalStmt(AFunCalStmt node)
    {
        defaultIn(node);
    }

    public void outAFunCalStmt(AFunCalStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunCalStmt(AFunCalStmt node)
    {
        inAFunCalStmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getFunCal() != null)
        {
            node.getFunCal().apply(this);
        }
        outAFunCalStmt(node);
    }

    public void inAIfstmtStmt(AIfstmtStmt node)
    {
        defaultIn(node);
    }

    public void outAIfstmtStmt(AIfstmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfstmtStmt(AIfstmtStmt node)
    {
        inAIfstmtStmt(node);
        if(node.getIfstmt() != null)
        {
            node.getIfstmt().apply(this);
        }
        outAIfstmtStmt(node);
    }

    public void inAWhilestmtStmt(AWhilestmtStmt node)
    {
        defaultIn(node);
    }

    public void outAWhilestmtStmt(AWhilestmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhilestmtStmt(AWhilestmtStmt node)
    {
        inAWhilestmtStmt(node);
        if(node.getWhilestmt() != null)
        {
            node.getWhilestmt().apply(this);
        }
        outAWhilestmtStmt(node);
    }

    public void inAReturnstmtStmt(AReturnstmtStmt node)
    {
        defaultIn(node);
    }

    public void outAReturnstmtStmt(AReturnstmtStmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAReturnstmtStmt(AReturnstmtStmt node)
    {
        inAReturnstmtStmt(node);
        if(node.getReturnstmt() != null)
        {
            node.getReturnstmt().apply(this);
        }
        outAReturnstmtStmt(node);
    }

    public void inAAssignment(AAssignment node)
    {
        defaultIn(node);
    }

    public void outAAssignment(AAssignment node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignment(AAssignment node)
    {
        inAAssignment(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getArrow() != null)
        {
            node.getArrow().apply(this);
        }
        if(node.getLVal() != null)
        {
            node.getLVal().apply(this);
        }
        outAAssignment(node);
    }

    public void inAIdLVal(AIdLVal node)
    {
        defaultIn(node);
    }

    public void outAIdLVal(AIdLVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdLVal(AIdLVal node)
    {
        inAIdLVal(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdLVal(node);
    }

    public void inAStringLVal(AStringLVal node)
    {
        defaultIn(node);
    }

    public void outAStringLVal(AStringLVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStringLVal(AStringLVal node)
    {
        inAStringLVal(node);
        if(node.getStringLiteral() != null)
        {
            node.getStringLiteral().apply(this);
        }
        outAStringLVal(node);
    }

    public void inAIdBracketsLVal(AIdBracketsLVal node)
    {
        defaultIn(node);
    }

    public void outAIdBracketsLVal(AIdBracketsLVal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdBracketsLVal(AIdBracketsLVal node)
    {
        inAIdBracketsLVal(node);
        if(node.getRBr() != null)
        {
            node.getRBr().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLBr() != null)
        {
            node.getLBr().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdBracketsLVal(node);
    }

    public void inAFunCal(AFunCal node)
    {
        defaultIn(node);
    }

    public void outAFunCal(AFunCal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunCal(AFunCal node)
    {
        inAFunCal(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExprList() != null)
        {
            node.getExprList().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAFunCal(node);
    }

    public void inASimpleExprList(ASimpleExprList node)
    {
        defaultIn(node);
    }

    public void outASimpleExprList(ASimpleExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASimpleExprList(ASimpleExprList node)
    {
        inASimpleExprList(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASimpleExprList(node);
    }

    public void inAListExprList(AListExprList node)
    {
        defaultIn(node);
    }

    public void outAListExprList(AListExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListExprList(AListExprList node)
    {
        inAListExprList(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getExprList() != null)
        {
            node.getExprList().apply(this);
        }
        outAListExprList(node);
    }

    public void inANoneExprList(ANoneExprList node)
    {
        defaultIn(node);
    }

    public void outANoneExprList(ANoneExprList node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoneExprList(ANoneExprList node)
    {
        inANoneExprList(node);
        outANoneExprList(node);
    }

    public void inAVarDef(AVarDef node)
    {
        defaultIn(node);
    }

    public void outAVarDef(AVarDef node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAVarDef(AVarDef node)
    {
        inAVarDef(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getTypes() != null)
        {
            node.getTypes().apply(this);
        }
        if(node.getColon() != null)
        {
            node.getColon().apply(this);
        }
        if(node.getVarIds() != null)
        {
            node.getVarIds().apply(this);
        }
        if(node.getVar() != null)
        {
            node.getVar().apply(this);
        }
        outAVarDef(node);
    }

    public void inAIdVarIds(AIdVarIds node)
    {
        defaultIn(node);
    }

    public void outAIdVarIds(AIdVarIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIdVarIds(AIdVarIds node)
    {
        inAIdVarIds(node);
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAIdVarIds(node);
    }

    public void inAListVarIds(AListVarIds node)
    {
        defaultIn(node);
    }

    public void outAListVarIds(AListVarIds node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAListVarIds(AListVarIds node)
    {
        inAListVarIds(node);
        if(node.getVarIds() != null)
        {
            node.getVarIds().apply(this);
        }
        if(node.getComma() != null)
        {
            node.getComma().apply(this);
        }
        if(node.getIdentifier() != null)
        {
            node.getIdentifier().apply(this);
        }
        outAListVarIds(node);
    }

    public void inAWhilestmt(AWhilestmt node)
    {
        defaultIn(node);
    }

    public void outAWhilestmt(AWhilestmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhilestmt(AWhilestmt node)
    {
        inAWhilestmt(node);
        if(node.getStmt() != null)
        {
            node.getStmt().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhilestmt(node);
    }

    public void inAWhileWithElse(AWhileWithElse node)
    {
        defaultIn(node);
    }

    public void outAWhileWithElse(AWhileWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileWithElse(AWhileWithElse node)
    {
        inAWhileWithElse(node);
        if(node.getStmtWithElse() != null)
        {
            node.getStmtWithElse().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getWhile() != null)
        {
            node.getWhile().apply(this);
        }
        outAWhileWithElse(node);
    }

    public void inAIfstmt(AIfstmt node)
    {
        defaultIn(node);
    }

    public void outAIfstmt(AIfstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfstmt(AIfstmt node)
    {
        inAIfstmt(node);
        if(node.getIfTrail() != null)
        {
            node.getIfTrail().apply(this);
        }
        if(node.getIfHeader() != null)
        {
            node.getIfHeader().apply(this);
        }
        outAIfstmt(node);
    }

    public void inAIfHeader(AIfHeader node)
    {
        defaultIn(node);
    }

    public void outAIfHeader(AIfHeader node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfHeader(AIfHeader node)
    {
        inAIfHeader(node);
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getIf() != null)
        {
            node.getIf().apply(this);
        }
        outAIfHeader(node);
    }

    public void inANoElseIfTrail(ANoElseIfTrail node)
    {
        defaultIn(node);
    }

    public void outANoElseIfTrail(ANoElseIfTrail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANoElseIfTrail(ANoElseIfTrail node)
    {
        inANoElseIfTrail(node);
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        outANoElseIfTrail(node);
    }

    public void inAWithElseIfTrail(AWithElseIfTrail node)
    {
        defaultIn(node);
    }

    public void outAWithElseIfTrail(AWithElseIfTrail node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWithElseIfTrail(AWithElseIfTrail node)
    {
        inAWithElseIfTrail(node);
        if(node.getElseSt() != null)
        {
            node.getElseSt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        outAWithElseIfTrail(node);
    }

    public void inASemiStmtWithElse(ASemiStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outASemiStmtWithElse(ASemiStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiStmtWithElse(ASemiStmtWithElse node)
    {
        inASemiStmtWithElse(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        outASemiStmtWithElse(node);
    }

    public void inAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAssignmentStmtWithElse(AAssignmentStmtWithElse node)
    {
        inAAssignmentStmtWithElse(node);
        if(node.getAssignment() != null)
        {
            node.getAssignment().apply(this);
        }
        outAAssignmentStmtWithElse(node);
    }

    public void inAStmtReturnstmtStmtWithElse(AStmtReturnstmtStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAStmtReturnstmtStmtWithElse(AStmtReturnstmtStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtReturnstmtStmtWithElse(AStmtReturnstmtStmtWithElse node)
    {
        inAStmtReturnstmtStmtWithElse(node);
        if(node.getReturnstmt() != null)
        {
            node.getReturnstmt().apply(this);
        }
        outAStmtReturnstmtStmtWithElse(node);
    }

    public void inAStmtFuncalStmtWithElse(AStmtFuncalStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAStmtFuncalStmtWithElse(AStmtFuncalStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAStmtFuncalStmtWithElse(AStmtFuncalStmtWithElse node)
    {
        inAStmtFuncalStmtWithElse(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getFunCal() != null)
        {
            node.getFunCal().apply(this);
        }
        outAStmtFuncalStmtWithElse(node);
    }

    public void inABlockStmtWithElse(ABlockStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outABlockStmtWithElse(ABlockStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseABlockStmtWithElse(ABlockStmtWithElse node)
    {
        inABlockStmtWithElse(node);
        if(node.getBlock() != null)
        {
            node.getBlock().apply(this);
        }
        outABlockStmtWithElse(node);
    }

    public void inAIfStmtWithElse(AIfStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAIfStmtWithElse(AIfStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfStmtWithElse(AIfStmtWithElse node)
    {
        inAIfStmtWithElse(node);
        if(node.getIfElse() != null)
        {
            node.getIfElse().apply(this);
        }
        outAIfStmtWithElse(node);
    }

    public void inAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        defaultIn(node);
    }

    public void outAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAWhileStmtWithElse(AWhileStmtWithElse node)
    {
        inAWhileStmtWithElse(node);
        if(node.getWhileWithElse() != null)
        {
            node.getWhileWithElse().apply(this);
        }
        outAWhileStmtWithElse(node);
    }

    public void inAIfElse(AIfElse node)
    {
        defaultIn(node);
    }

    public void outAIfElse(AIfElse node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIfElse(AIfElse node)
    {
        inAIfElse(node);
        if(node.getElseSt() != null)
        {
            node.getElseSt().apply(this);
        }
        if(node.getElse() != null)
        {
            node.getElse().apply(this);
        }
        if(node.getThen() != null)
        {
            node.getThen().apply(this);
        }
        if(node.getIfHeader() != null)
        {
            node.getIfHeader().apply(this);
        }
        outAIfElse(node);
    }

    public void inACondNotCond(ACondNotCond node)
    {
        defaultIn(node);
    }

    public void outACondNotCond(ACondNotCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondNotCond(ACondNotCond node)
    {
        inACondNotCond(node);
        if(node.getCond() != null)
        {
            node.getCond().apply(this);
        }
        if(node.getNot() != null)
        {
            node.getNot().apply(this);
        }
        outACondNotCond(node);
    }

    public void inACondOrAndCond(ACondOrAndCond node)
    {
        defaultIn(node);
    }

    public void outACondOrAndCond(ACondOrAndCond node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondOrAndCond(ACondOrAndCond node)
    {
        inACondOrAndCond(node);
        if(node.getConditionalOrExpression() != null)
        {
            node.getConditionalOrExpression().apply(this);
        }
        outACondOrAndCond(node);
    }

    public void inACondAndConditionalOrExpression(ACondAndConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outACondAndConditionalOrExpression(ACondAndConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondAndConditionalOrExpression(ACondAndConditionalOrExpression node)
    {
        inACondAndConditionalOrExpression(node);
        if(node.getConditionalAndExpression() != null)
        {
            node.getConditionalAndExpression().apply(this);
        }
        outACondAndConditionalOrExpression(node);
    }

    public void inACondOrConditionalOrExpression(ACondOrConditionalOrExpression node)
    {
        defaultIn(node);
    }

    public void outACondOrConditionalOrExpression(ACondOrConditionalOrExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACondOrConditionalOrExpression(ACondOrConditionalOrExpression node)
    {
        inACondOrConditionalOrExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getOr() != null)
        {
            node.getOr().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outACondOrConditionalOrExpression(node);
    }

    public void inAComparativeConditionalAndExpression(AComparativeConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outAComparativeConditionalAndExpression(AComparativeConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAComparativeConditionalAndExpression(AComparativeConditionalAndExpression node)
    {
        inAComparativeConditionalAndExpression(node);
        if(node.getComparativeExpression() != null)
        {
            node.getComparativeExpression().apply(this);
        }
        outAComparativeConditionalAndExpression(node);
    }

    public void inAAndExprConditionalAndExpression(AAndExprConditionalAndExpression node)
    {
        defaultIn(node);
    }

    public void outAAndExprConditionalAndExpression(AAndExprConditionalAndExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAndExprConditionalAndExpression(AAndExprConditionalAndExpression node)
    {
        inAAndExprConditionalAndExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getAnd() != null)
        {
            node.getAnd().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAAndExprConditionalAndExpression(node);
    }

    public void inARelationalComparativeExpression(ARelationalComparativeExpression node)
    {
        defaultIn(node);
    }

    public void outARelationalComparativeExpression(ARelationalComparativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseARelationalComparativeExpression(ARelationalComparativeExpression node)
    {
        inARelationalComparativeExpression(node);
        if(node.getRelationalExpression() != null)
        {
            node.getRelationalExpression().apply(this);
        }
        outARelationalComparativeExpression(node);
    }

    public void inAEqualComparativeExpression(AEqualComparativeExpression node)
    {
        defaultIn(node);
    }

    public void outAEqualComparativeExpression(AEqualComparativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAEqualComparativeExpression(AEqualComparativeExpression node)
    {
        inAEqualComparativeExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getEq() != null)
        {
            node.getEq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAEqualComparativeExpression(node);
    }

    public void inANotEqualComparativeExpression(ANotEqualComparativeExpression node)
    {
        defaultIn(node);
    }

    public void outANotEqualComparativeExpression(ANotEqualComparativeExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseANotEqualComparativeExpression(ANotEqualComparativeExpression node)
    {
        inANotEqualComparativeExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getNeq() != null)
        {
            node.getNeq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outANotEqualComparativeExpression(node);
    }

    public void inAAdditiveRelationalExpression(AAdditiveRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAAdditiveRelationalExpression(AAdditiveRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAdditiveRelationalExpression(AAdditiveRelationalExpression node)
    {
        inAAdditiveRelationalExpression(node);
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAdditiveRelationalExpression(node);
    }

    public void inALessThanRelationalExpression(ALessThanRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALessThanRelationalExpression(ALessThanRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessThanRelationalExpression(ALessThanRelationalExpression node)
    {
        inALessThanRelationalExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLt() != null)
        {
            node.getLt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALessThanRelationalExpression(node);
    }

    public void inAGreaterThanRelationalExpression(AGreaterThanRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGreaterThanRelationalExpression(AGreaterThanRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterThanRelationalExpression(AGreaterThanRelationalExpression node)
    {
        inAGreaterThanRelationalExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGt() != null)
        {
            node.getGt().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGreaterThanRelationalExpression(node);
    }

    public void inAGreaterEqualThanRelationalExpression(AGreaterEqualThanRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outAGreaterEqualThanRelationalExpression(AGreaterEqualThanRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAGreaterEqualThanRelationalExpression(AGreaterEqualThanRelationalExpression node)
    {
        inAGreaterEqualThanRelationalExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getGteq() != null)
        {
            node.getGteq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outAGreaterEqualThanRelationalExpression(node);
    }

    public void inALessEqualThanRelationalExpression(ALessEqualThanRelationalExpression node)
    {
        defaultIn(node);
    }

    public void outALessEqualThanRelationalExpression(ALessEqualThanRelationalExpression node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALessEqualThanRelationalExpression(ALessEqualThanRelationalExpression node)
    {
        inALessEqualThanRelationalExpression(node);
        if(node.getRight() != null)
        {
            node.getRight().apply(this);
        }
        if(node.getLteq() != null)
        {
            node.getLteq().apply(this);
        }
        if(node.getLeft() != null)
        {
            node.getLeft().apply(this);
        }
        outALessEqualThanRelationalExpression(node);
    }

    public void inASemiReturnstmt(ASemiReturnstmt node)
    {
        defaultIn(node);
    }

    public void outASemiReturnstmt(ASemiReturnstmt node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASemiReturnstmt(ASemiReturnstmt node)
    {
        inASemiReturnstmt(node);
        if(node.getSemi() != null)
        {
            node.getSemi().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getReturn() != null)
        {
            node.getReturn().apply(this);
        }
        outASemiReturnstmt(node);
    }

    public void inAFactorExpr(AFactorExpr node)
    {
        defaultIn(node);
    }

    public void outAFactorExpr(AFactorExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFactorExpr(AFactorExpr node)
    {
        inAFactorExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAFactorExpr(node);
    }

    public void inAAddExpr(AAddExpr node)
    {
        defaultIn(node);
    }

    public void outAAddExpr(AAddExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAddExpr(AAddExpr node)
    {
        inAAddExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outAAddExpr(node);
    }

    public void inASubExpr(ASubExpr node)
    {
        defaultIn(node);
    }

    public void outASubExpr(ASubExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseASubExpr(ASubExpr node)
    {
        inASubExpr(node);
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        outASubExpr(node);
    }

    public void inATermFactor(ATermFactor node)
    {
        defaultIn(node);
    }

    public void outATermFactor(ATermFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseATermFactor(ATermFactor node)
    {
        inATermFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        outATermFactor(node);
    }

    public void inAMultFactor(AMultFactor node)
    {
        defaultIn(node);
    }

    public void outAMultFactor(AMultFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMultFactor(AMultFactor node)
    {
        inAMultFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getStar() != null)
        {
            node.getStar().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAMultFactor(node);
    }

    public void inAModFactor(AModFactor node)
    {
        defaultIn(node);
    }

    public void outAModFactor(AModFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAModFactor(AModFactor node)
    {
        inAModFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getMod() != null)
        {
            node.getMod().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outAModFactor(node);
    }

    public void inADivFactor(ADivFactor node)
    {
        defaultIn(node);
    }

    public void outADivFactor(ADivFactor node)
    {
        defaultOut(node);
    }

    @Override
    public void caseADivFactor(ADivFactor node)
    {
        inADivFactor(node);
        if(node.getTerm() != null)
        {
            node.getTerm().apply(this);
        }
        if(node.getDiv() != null)
        {
            node.getDiv().apply(this);
        }
        if(node.getFactor() != null)
        {
            node.getFactor().apply(this);
        }
        outADivFactor(node);
    }

    public void inAIntTerm(AIntTerm node)
    {
        defaultIn(node);
    }

    public void outAIntTerm(AIntTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAIntTerm(AIntTerm node)
    {
        inAIntTerm(node);
        if(node.getIntegers() != null)
        {
            node.getIntegers().apply(this);
        }
        if(node.getPlusOrMinus() != null)
        {
            node.getPlusOrMinus().apply(this);
        }
        outAIntTerm(node);
    }

    public void inACharTerm(ACharTerm node)
    {
        defaultIn(node);
    }

    public void outACharTerm(ACharTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseACharTerm(ACharTerm node)
    {
        inACharTerm(node);
        if(node.getCharConst() != null)
        {
            node.getCharConst().apply(this);
        }
        outACharTerm(node);
    }

    public void inALValTerm(ALValTerm node)
    {
        defaultIn(node);
    }

    public void outALValTerm(ALValTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseALValTerm(ALValTerm node)
    {
        inALValTerm(node);
        if(node.getLVal() != null)
        {
            node.getLVal().apply(this);
        }
        if(node.getPlusOrMinus() != null)
        {
            node.getPlusOrMinus().apply(this);
        }
        outALValTerm(node);
    }

    public void inAFunCalTerm(AFunCalTerm node)
    {
        defaultIn(node);
    }

    public void outAFunCalTerm(AFunCalTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAFunCalTerm(AFunCalTerm node)
    {
        inAFunCalTerm(node);
        if(node.getFunCal() != null)
        {
            node.getFunCal().apply(this);
        }
        outAFunCalTerm(node);
    }

    public void inAParTerm(AParTerm node)
    {
        defaultIn(node);
    }

    public void outAParTerm(AParTerm node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAParTerm(AParTerm node)
    {
        inAParTerm(node);
        if(node.getRPar() != null)
        {
            node.getRPar().apply(this);
        }
        if(node.getExpr() != null)
        {
            node.getExpr().apply(this);
        }
        if(node.getLPar() != null)
        {
            node.getLPar().apply(this);
        }
        outAParTerm(node);
    }

    public void inAPlusPlusOrMinus(APlusPlusOrMinus node)
    {
        defaultIn(node);
    }

    public void outAPlusPlusOrMinus(APlusPlusOrMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAPlusPlusOrMinus(APlusPlusOrMinus node)
    {
        inAPlusPlusOrMinus(node);
        if(node.getPlus() != null)
        {
            node.getPlus().apply(this);
        }
        outAPlusPlusOrMinus(node);
    }

    public void inAMinusPlusOrMinus(AMinusPlusOrMinus node)
    {
        defaultIn(node);
    }

    public void outAMinusPlusOrMinus(AMinusPlusOrMinus node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAMinusPlusOrMinus(AMinusPlusOrMinus node)
    {
        inAMinusPlusOrMinus(node);
        if(node.getMinus() != null)
        {
            node.getMinus().apply(this);
        }
        outAMinusPlusOrMinus(node);
    }
}
