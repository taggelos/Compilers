Package compiler;

Helpers
    sp = ' ';
    lf = 0x000a;
    cr = 0x000d;
    ff = 0x000c;
    ht = 0x0009; 
    line_terminator = lf | cr | cr lf;
    white_space = (sp | ht | ff | line_terminator)*;

    all = [0..0xffff];
    input_character = [all - [cr + lf]];

    digit = ['0' .. '9'];

    escape_seq = '\n' | '\t' | '\r' | '\0'  | '\\' | '\' ''' | '\"' | '\xnn'; //<--

    latin_letter = ['a' .. 'z'] | ['A' .. 'Z']; 

    char_literal = ' ' | '!' | '"' | '#' | '$' | '%' | '&' | '(' | ')' 
        | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' | '=' | '>' 
        | '?' | '@' | '[' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~'
        | ['a' .. 'z'] | ['A' .. 'Z'] | digit | escape_seq;  //(escape_seq | ([_A-Za-z][_A-Za-z0-9])*)*

    not_dollar = [all - '$'];
    //not_doubledollar = [all - '$$'];

    simple_comment = '$' (not_dollar input_character*)? line_terminator?;
    //multi_comment = '$$' not_dollar* ('$' (not_dollar+))* '$$';
    multi_comment = '$$' ('$'? not_dollar)* '$$';

Tokens
    white_space = white_space;
    escape_seq = escape_seq;

    and     = 'and'; 
    char    = 'char';
    div     = 'div';
    do      = 'do';
    else    = 'else';
    fun     = 'fun';
    if      = 'if';
    int     = 'int';
    mod     = 'mod';
    not     = 'not';
    nothing = 'nothing';
    or      = 'or';
    ref     = 'ref';
    return  = 'return';
    then    = 'then';
    var     = 'var';
    while   = 'while';

    
    integers = digit+;

    string_literal = '"' char_literal* '"'; //<--
    char_const = '"' char_literal '"';

    identifier = latin_letter (latin_letter | digit | '_' )*;

    //operators

    minus   = '-';
    plus    = '+';
    star    = '*';
    slash   = '/';
    htag    = '#';
    eq      = '=';
    neq     = '<>';
    lt      = '<';
    gt      = '>';
    lteq    = '<=';
    gteq    = '>=';
    
  
    //separators

    l_par   = '(';
    r_par   = ')';
    l_br    = '[';
    r_br    = ']';
    l_ag    = '{';
    r_ag    = '}';
    comma   = ',';
    semi    = ';';
    colon   = ':';
    arrow   = '<-';  

    
    comment = simple_comment | multi_comment;


Ignored Tokens
    white_space,
    comment;


Productions
    program = line+;
    line = 
        {line1} expr | 
        {line2} var_def |
        {line3} fun_def;
    
    
    fun_def =
        {fun_def1} header local_def* block;


    header =
        {header1} fun identifier l_par fpar_def r_par colon return_type;


    fpar_def =
        {fpar_def1} ref? identifier colon types fpar_def|
        {fpar_def2} ref? identifier comma fpar_def |
        {fpar_def3} ref? identifier colon types comma fpar_def |
        {fpar_def4} semi fpar_def |
        {fpar_def5} ;

    types =
        {types1} int |
        {types2} char |
        {types3} char l_br r_br |
        {types4} char l_br integers r_br |
        {types5} int l_br r_br |
        {types6} int l_br integers r_br;

    return_type =
        {return_type1} int |
        {return_type2} char |
        {return_type3} nothing;

    local_def =
        {local_def1} fun_def |
        {local_def2} fun_dec |
        {local_def3} var_def;

    fun_dec =
        {fun_dec} header semi;

    block =
        {block} l_ag stmt* r_ag;  // <----

    /*block =
        {block1} l_ag r_ag | // <----
        {block2} l_ag stmt+ r_ag;*/

    stmt =  
        {stmt1} semi | 
        {stmt2} l_val arrow expr semi| 
        {stmt3} block | 
        {stmt4} fun_cal semi ;
        /*{ifstmt} ifstmt | 
        {whilestmt} whilestmt;
        {returnstmt} returnstmt;*/

    l_val = 
        {l_val1} identifier | 
        {l_val2} string_literal ;  /*| 
        {l_val3} l_val ; */

    fun_cal = 
        {fun_cal1} identifier l_par expr_list r_par;    
    
    expr_list =  
        {expr_list1} expr |
        {expr_list2} expr comma expr_list |
        {expr_list3} ; 

    var_def =
        {var_def1} var var_ids colon types semi;

    var_ids =
        {var_ids1} identifier |
        {var_ids2} identifier comma var_ids;  //{var_ids1} identifier (comma identifier)*;
    
    /*var_ids = 
        {var_ids1} identifier (comma identifier)* ;
*/
        
    expr =
        {expr1} factor |
        {expr2} expr plus factor |
        {expr3} expr minus factor |
        {expr4} l_val |        
        {expr5} fun_cal ;

    factor =
        {factor1} term |
        {factor2} factor star term |
        {factor3} factor slash term |
        {factor4} factor mod term;

    term =
        {term1} integers |
        {term2} char_const;
        //{term2} l_val | //pros suzhthsh
        //{term3} l_par expr r_par;



