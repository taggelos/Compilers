Package compiler;

Helpers
    sp = ' ';
    lf = 0x000a;
    cr = 0x000d;
    ff = 0x000c;
    ht = 0x0009; 
    line_terminator = lf | cr | cr lf;
    white_space = (sp | ht | ff | line_terminator)*;

    all = [0..0xffff];
    input_character = [all - [cr + lf]];

    digit = ['0' .. '9'];

    escape_seq = '\n' | '\t' | '\r' | '\0'  | '\\' | '\' ''' | '\"' | '\xnn'; //<--

    char_literal = ' ' | '!' | '"' | '#' | '$' | '%' | '&' | '(' | ')' 
        | '*' | '+' | ',' | '-' | '.' | '/' | ':' | ';' | '<' | '=' | '>' 
        | '?' | '@' | '[' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~'
        | ['a' .. 'z'] | ['A' .. 'Z'] | digit | escape_seq;  //(escape_seq | ([_A-Za-z][_A-Za-z0-9])*)*

    not_dollar = [all - '$'];
    //not_doubledollar = [all - '$$'];

    simple_comment = '$' input_character* line_terminator?;
    //multi_comment = '$$' not_dollar* ('$' (not_dollar+))* '$$';
    multi_comment = '$$' ('$'? not_dollar)* '$$';

Tokens
    white_space = white_space;
    escape_seq = escape_seq;

    and = 'and'; 
    char = 'char';
    div = 'div';
    do = 'do';
    else = 'else';
    fun = 'fun';
    if  = 'if';
    int   = 'int';
    mod   = 'mod';
    not   = 'not';
    nothing= 'nothing';
    or    = 'or';
    ref   = 'ref';
    return= 'return';
    then  = 'then';
    var   = 'var';
    while = 'while';

    
    integers = digit+;

    string_literal = '"' char_literal* '"'; //<--


    //operators

    minus = '-';
    plus  = '+';
    star  = '*';
    slash = '/';
    htag  = '#';
    assign= '=';
    neq   = '<>';
    lt    = '<';
    gt    = '>';
    lteq  = '<=';
    gteq  = '>=';
    
  
    //separators

    l_par = '(';
    r_par = ')';
    l_bkt = '[';
    r_bkt = ']';
    l_brc = '{';
    r_brc = '}';
    comma = ',';
    semi  = ';';
    colon = ':';
    arrow = '<-';  

    
    comment = simple_comment | multi_comment;


Ignored Tokens
    white_space,
    escape_seq,
    comment;


Productions
    expr =
        {factor} factor |
        {plus} expr plus factor |
        {minus} expr minus factor;

    factor =
        {term} term |
        {mult} factor star term |
        {div} factor slash term;

    term =
        {integers} integers |
        {expr} l_par expr r_par;