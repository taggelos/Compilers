/* This file was generated by SableCC (http://www.sablecc.org/). */

package compiler.node;

import compiler.analysis.*;

@SuppressWarnings("nls")
public final class AHeader extends PHeader
{
    private TIdentifier _name_;
    private PFparDef _pars_;
    private PReturnType _returnT_;

    public AHeader()
    {
        // Constructor
    }

    public AHeader(
        @SuppressWarnings("hiding") TIdentifier _name_,
        @SuppressWarnings("hiding") PFparDef _pars_,
        @SuppressWarnings("hiding") PReturnType _returnT_)
    {
        // Constructor
        setName(_name_);

        setPars(_pars_);

        setReturnT(_returnT_);

    }

    @Override
    public Object clone()
    {
        return new AHeader(
            cloneNode(this._name_),
            cloneNode(this._pars_),
            cloneNode(this._returnT_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAHeader(this);
    }

    public TIdentifier getName()
    {
        return this._name_;
    }

    public void setName(TIdentifier node)
    {
        if(this._name_ != null)
        {
            this._name_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._name_ = node;
    }

    public PFparDef getPars()
    {
        return this._pars_;
    }

    public void setPars(PFparDef node)
    {
        if(this._pars_ != null)
        {
            this._pars_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pars_ = node;
    }

    public PReturnType getReturnT()
    {
        return this._returnT_;
    }

    public void setReturnT(PReturnType node)
    {
        if(this._returnT_ != null)
        {
            this._returnT_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._returnT_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._name_)
            + toString(this._pars_)
            + toString(this._returnT_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._name_ == child)
        {
            this._name_ = null;
            return;
        }

        if(this._pars_ == child)
        {
            this._pars_ = null;
            return;
        }

        if(this._returnT_ == child)
        {
            this._returnT_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._name_ == oldChild)
        {
            setName((TIdentifier) newChild);
            return;
        }

        if(this._pars_ == oldChild)
        {
            setPars((PFparDef) newChild);
            return;
        }

        if(this._returnT_ == oldChild)
        {
            setReturnT((PReturnType) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
